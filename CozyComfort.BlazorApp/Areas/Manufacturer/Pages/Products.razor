@page "/manufacturer/products"
@using CozyComfort.Shared.DTOs
@using CozyComfort.Manufacturer.API.Models.DTOs
@attribute [Authorize(Roles = "Administrator,Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation

<PageTitle>Products - Manufacturer</PageTitle>

<h3>Manufacturer Products</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" class="form-control" placeholder="Search products..." 
               @bind="searchTerm" @bind:event="oninput" @onkeyup="@(async (e) => { if (e.Key == "Enter") await LoadProducts(); })" />
    </div>
    <div class="col-md-6">
        <button class="btn btn-primary" @onclick="() => Navigation.NavigateTo('/manufacturer/products/create')">
            <i class="bi bi-plus"></i> Add New Product
        </button>
    </div>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (products == null || !products.Items.Any())
{
    <div class="alert alert-info">No products found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>SKU</th>
                    <th>Name</th>
                    <th>Material</th>
                    <th>Size</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Available</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products.Items)
                {
                    <tr>
                        <td>@product.SKU</td>
                        <td>@product.Name</td>
                        <td>@product.Material</td>
                        <td>@product.Size</td>
                        <td>$@product.Price.ToString("F2")</td>
                        <td>@product.CurrentStock</td>
                        <td>@product.AvailableStock</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ViewProduct(product.Id)">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-warning" @onclick="() => EditProduct(product.Id)">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-success" @onclick="() => CheckStock(product)">
                                <i class="bi bi-box"></i> Check Stock
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <nav>
        <ul class="pagination">
            <li class="page-item @(products.HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="PreviousPage">Previous</button>
            </li>
            @for (int i = 1; i <= products.TotalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }
            <li class="page-item @(products.HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@if (showStockModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Stock Check - @selectedProduct?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseStockModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Quantity to Check:</label>
                        <input type="number" class="form-control" @bind="quantityToCheck" />
                    </div>
                    <button class="btn btn-primary" @onclick="PerformStockCheck">Check Availability</button>
                    
                    @if (stockCheckResult != null)
                    {
                        <div class="mt-3">
                            <div class="alert @(stockCheckResult.IsAvailable ? "alert-success" : "alert-warning")">
                                <h6>@stockCheckResult.Message</h6>
                                <p>Available Stock: @stockCheckResult.AvailableStock</p>
                                @if (!stockCheckResult.IsAvailable && stockCheckResult.EstimatedProductionDays.HasValue)
                                {
                                    <p>Estimated Production Time: @stockCheckResult.EstimatedProductionDays days</p>
                                    <p>Available By: @stockCheckResult.EstimatedAvailabilityDate?.ToString("yyyy-MM-dd")</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private PagedResult<ProductDto>? products;
    private bool loading = true;
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize = 10;

    private bool showStockModal = false;
    private ProductDto? selectedProduct;
    private int quantityToCheck = 1;
    private StockCheckResponse? stockCheckResult;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        var request = new PagedRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize,
            SearchTerm = searchTerm
        };

        var response = await ManufacturerService.GetProductsAsync(request);
        if (response.Success)
        {
            products = response.Data;
        }
        loading = false;
    }

    private void ViewProduct(int id)
    {
        Navigation.NavigateTo($"/manufacturer/products/{id}");
    }

    private void EditProduct(int id)
    {
        Navigation.NavigateTo($"/manufacturer/products/edit/{id}");
    }

    private void CheckStock(ProductDto product)
    {
        selectedProduct = product;
        showStockModal = true;
        stockCheckResult = null;
        quantityToCheck = 1;
    }

    private async Task PerformStockCheck()
    {
        if (selectedProduct == null) return;

        var request = new StockCheckRequest
        {
            ProductId = selectedProduct.Id,
            QuantityRequested = quantityToCheck
        };

        var response = await ManufacturerService.CheckStockAsync(request);
        if (response.Success)
        {
            stockCheckResult = response.Data;
        }
    }

    private void CloseStockModal()
    {
        showStockModal = false;
        selectedProduct = null;
        stockCheckResult = null;
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadProducts();
    }

    private async Task PreviousPage()
    {
        if (products?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (products?.HasNextPage == true)
        {
            currentPage++;
            await LoadProducts();
        }
    }
}