@* ProductCard.razor *@
@using CozyComfort.Shared.DTOs
@using CozyComfort.Shared.DTOs.Seller

<div class="card h-100 shadow-sm">
    @if (!string.IsNullOrEmpty(Product.ImageUrl))
    {
        <img src="@Product.ImageUrl" class="card-img-top" alt="@Product.ProductName" style="height: 200px; object-fit: cover;">
    }
    else
    {
        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
            <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
        </div>
    }
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">@Product.ProductName</h5>
        <p class="card-text text-muted small">SKU: @Product.SKU</p>
        <p class="card-text flex-grow-1">@Product.Description</p>
        <div class="mt-auto">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="h5 mb-0 text-primary">$@Product.Price.ToString("F2")</span>
                @if (Product.CurrentStock > 0)
                {
                    <span class="badge bg-success">In Stock</span>
                }
                else
                {
                    <span class="badge bg-danger">Out of Stock</span>
                }
            </div>
            <button class="btn btn-primary w-100" 
                    @onclick="() => OnAddToCart.InvokeAsync(Product)"
                    disabled="@(Product.CurrentStock <= 0)">
                @if (Product.CurrentStock > 0)
                {
                    <i class="bi bi-cart-plus"></i> <text>Add to Cart</text>
                }
                else
                {
                    <i class="bi bi-x-circle"></i> <text>Out of Stock</text>
                }
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public SellerProductDto Product { get; set; } = new();
    [Parameter] public EventCallback<SellerProductDto> OnAddToCart { get; set; }
}