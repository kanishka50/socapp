@inject ISellerService SellerService
@inject SessionService SessionService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Cozy Comfort</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="shop">
                <span class="bi bi-shop" aria-hidden="true"></span> Shop
            </NavLink>
        </div>

        <!-- Cart Link - Available to everyone -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="cart">
                <span class="bi bi-cart" aria-hidden="true"></span> Cart
                @if (cartItemCount > 0)
                {
                    <span class="badge bg-danger ms-1">@cartItemCount</span>
                }
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="my-orders">
                        <span class="bi bi-bag-check" aria-hidden="true"></span> My Orders
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="Administrator,Manufacturer">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="manufacturer/dashboard">
                    <span class="bi bi-factory" aria-hidden="true"></span> Manufacturing
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="manufacturer/products">
                    <span class="bi bi-box" aria-hidden="true"></span> Products
                </NavLink>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Administrator,Distributor">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="distributor/dashboard">
                    <span class="bi bi-truck" aria-hidden="true"></span> Distribution
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="distributor/orders">
                    <span class="bi bi-clipboard" aria-hidden="true"></span> Orders
                </NavLink>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Administrator,Seller">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="seller/dashboard">
                    <span class="bi bi-shop-window" aria-hidden="true"></span> Sales Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="seller/orders">
                    <span class="bi bi-receipt" aria-hidden="true"></span> Manage Orders
                </NavLink>
            </div>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private int cartItemCount = 0;
    private Timer? cartUpdateTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartCount();

        // Set up a timer to update cart count every 30 seconds
        cartUpdateTimer = new Timer(async _ => await LoadCartCount(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task LoadCartCount()
    {
        try
        {
            var sessionId = SessionService.GetSessionId();
            if (!string.IsNullOrEmpty(sessionId))
            {
                var response = await SellerService.GetCartAsync(sessionId);
                if (response.Success && response.Data != null)
                {
                    cartItemCount = response.Data.Items.Sum(i => i.Quantity);
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart count: {ex.Message}");
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        cartUpdateTimer?.Dispose();
    }
}