<div class="card h-100 shadow-sm">
    @if (!string.IsNullOrEmpty(Product.ImageUrl))
    {
        <img src="@Product.ImageUrl" class="card-img-top" alt="@Product.ProductName"
             style="height: 200px; object-fit: cover;" />
    }
    else
    {
        <div class="card-img-top bg-light d-flex align-items-center justify-content-center"
             style="height: 200px;">
            <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
        </div>
    }

    <div class="card-body d-flex flex-column">
        <h5 class="card-title">@Product.ProductName</h5>

        @if (!string.IsNullOrEmpty(Product.Category))
        {
            <span class="badge bg-secondary mb-2">@Product.Category</span>
        }

        <p class="card-text flex-grow-1">
            @(string.IsNullOrEmpty(Product.Description) ? "No description available" : Product.Description)
        </p>

        <div class="d-flex justify-content-between align-items-center mt-auto">
            <strong class="text-primary">$@GetPrice().ToString("F2")</strong>

            @if (IsInStock())
            {
                <button class="btn btn-primary btn-sm" @onclick="HandleAddToCart">
                    <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
            }
            else
            {
                <button class="btn btn-secondary btn-sm" disabled>
                    Out of Stock
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public SellerProductDto Product { get; set; } = null!;
    [Parameter] public EventCallback<SellerProductDto> OnAddToCart { get; set; }

    private decimal GetPrice()
    {
        // Handle both Price and RetailPrice properties
        return Product.RetailPrice > 0 ? Product.RetailPrice : Product.Price;
    }

    private bool IsInStock()
    {
        // Handle both InStock and IsAvailable properties
        return Product.IsAvailable || Product.InStock;
    }

    private async Task HandleAddToCart()
    {
        await OnAddToCart.InvokeAsync(Product);
    }
}