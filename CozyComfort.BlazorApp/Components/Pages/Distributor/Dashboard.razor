@page "/distributor/dashboard"
@using CozyComfort.Shared.DTOs.Distributor
@using CozyComfort.Shared.DTOs.Manufacturer
@using CozyComfort.Shared.DTOs
@using CozyComfort.BlazorApp.Services.Interfaces
@attribute [Authorize(Roles = "Distributor,Administrator")]
@inject IDistributorService DistributorService
@inject IManufacturerService ManufacturerService

<PageTitle>Distributor Dashboard</PageTitle>

<div class="container mt-4">
    <h2>Distributor Dashboard</h2>
    <p class="text-muted">Manage inventory and process orders from sellers</p>

    <!-- Check Manufacturer Stock -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Check Manufacturer Stock</h5>
        </div>
        <div class="card-body">
            @if (isLoadingManufacturerProducts)
            {
                <p>Checking manufacturer inventory...</p>
            }
            else if (manufacturerProducts?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Manufacturer Price</th>
                            <th>Available Stock</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in manufacturerProducts.Where(p => p.CurrentStock > 0))
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Category</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>@product.CurrentStock units</td>
                                <td>
                                    @if (importedProductIds.Contains(product.Id))
                                    {
                                        <span class="badge bg-success">Already Added</span>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary"
                                                @onclick="() => AddProductFromManufacturer(product)">
                                            Add to Inventory
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products available from manufacturer.</p>
            }
        </div>
    </div>

    <!-- Distributor Inventory -->
    <div class="card">
        <div class="card-header">
            <h5>My Inventory</h5>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <p>Loading inventory...</p>
            }
            else if (distributorProducts?.Items?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>SKU</th>
                            <th>Purchase Price</th>
                            <th>Selling Price</th>
                            <th>Current Stock</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in distributorProducts.Items)
                        {
                            <tr>
                                <td>@product.ProductName</td>
                                <td>@product.SKU</td>
                                <td>$@product.PurchasePrice.ToString("F2")</td>
                                <td>$@product.SellingPrice.ToString("F2")</td>
                                <td>@product.CurrentStock units</td>
                                <td>
                                    @if (product.CurrentStock == 0)
                                    {
                                        <span class="text-danger">Out of Stock</span>
                                        <button class="btn btn-sm btn-warning ms-2"
                                                @onclick="() => OrderFromManufacturer(product)">
                                            Order More
                                        </button>
                                    }
                                    else if (product.CurrentStock <= product.MinStockLevel)
                                    {
                                        <span class="text-warning">Low Stock</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">In Stock</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products in inventory. Add products from manufacturer above.</p>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<DistributorProductDto>? distributorProducts;
    private List<ProductDto> manufacturerProducts = new();
    private HashSet<int> importedProductIds = new();

    private bool isLoading = true;
    private bool isLoadingManufacturerProducts = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.WhenAll(
            LoadDistributorProducts(),
            LoadManufacturerProducts()
        );
    }

    private async Task LoadDistributorProducts()
    {
        try
        {
            isLoading = true;
            var response = await DistributorService.GetProductsAsync(new PagedRequest { PageSize = 100 });
            if (response.Success && response.Data != null)
            {
                distributorProducts = response.Data;
                importedProductIds = distributorProducts.Items
                    .Select(p => p.ManufacturerProductId)
                    .ToHashSet();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading distributor products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadManufacturerProducts()
    {
        try
        {
            isLoadingManufacturerProducts = true;
            var response = await ManufacturerService.GetProductsAsync(new PagedRequest { PageSize = 100 });
            if (response.Success && response.Data != null)
            {
                manufacturerProducts = response.Data.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading manufacturer products: {ex.Message}");
        }
        finally
        {
            isLoadingManufacturerProducts = false;
        }
    }

    private async Task AddProductFromManufacturer(ProductDto manufacturerProduct)
    {
        try
        {
            var dto = new CreateDistributorProductDto
            {
                ManufacturerProductId = manufacturerProduct.Id,
                ProductName = manufacturerProduct.Name,
                SKU = $"DIST-{manufacturerProduct.SKU}",
                PurchasePrice = manufacturerProduct.Price,
                SellingPrice = Math.Round(manufacturerProduct.Price * 1.3m, 2), // 30% markup
                MinStockLevel = 5,
                ReorderPoint = 10,
                ReorderQuantity = 50
            };

            var response = await DistributorService.AddProductFromManufacturerAsync(dto);
            if (response.Success)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product: {ex.Message}");
        }
    }

    private async Task OrderFromManufacturer(DistributorProductDto product)
    {
        // This demonstrates the ordering process
        var orderDto = new CreateManufacturerOrderDto
        {
            Items = new List<OrderItemRequest>
            {
                new OrderItemRequest
                {
                    ManufacturerProductId = product.ManufacturerProductId,
                    Quantity = 50
                }
            },
            ShippingAddress = "Distributor Warehouse Address",
            Notes = $"Restocking {product.ProductName}"
        };

        // In real implementation, this would call the service
        Console.WriteLine($"Ordering 50 units of {product.ProductName} from manufacturer");

        // For demo purposes, just reload
        await LoadData();
    }
}