@page "/distributor/orders/{OrderId:int}"
@attribute [Authorize(Roles = "Distributor")]
@inject IDistributorService DistributorService
@inject NavigationManager Navigation
@inject ILogger<OrderDetails> Logger

<PageTitle>Order Details - Distributor</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item"><a href="/distributor/dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/distributor/orders" class="text-decoration-none">Orders</a></li>
            <li class="breadcrumb-item active text-muted" aria-current="page">Order Details</li>
        </ol>
    </nav>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading order details...</p>
        </div>
    }
    else if (order != null)
    {
        <!-- Clean Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">Order #@order.OrderNumber</h2>
                <p class="text-muted mb-0">
                    @if (order.OrderType == "Manufacturer")
                    {
                        <span class="badge bg-primary me-2">
                            <i class="bi bi-factory me-1"></i>From Manufacturer
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-info me-2">
                            <i class="bi bi-shop me-1"></i>From Seller
                        </span>
                    }
                    <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                </p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="NavigateToOrders">
                <i class="bi bi-arrow-left me-1"></i> Back to Orders
            </button>
        </div>

        <!-- Alert Messages -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle me-2"></i>@successMessage
                <button type="button" class="btn-close" @onclick="ClearSuccessMessage" aria-label="Close"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-circle me-2"></i>@errorMessage
                <button type="button" class="btn-close" @onclick="ClearErrorMessage" aria-label="Close"></button>
            </div>
        }

        <div class="row">
            <!-- Main Content -->
            <div class="col-md-8">
                <!-- Order Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>Order Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-tag me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Order Type</small>
                                        @if (order.OrderType == "Manufacturer")
                                        {
                                            <span class="badge bg-primary">
                                                <i class="bi bi-factory me-1"></i>From Manufacturer
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-shop me-1"></i>From Seller
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-flag me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Status</small>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-calendar me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Order Date</small>
                                        <span class="fw-semibold">@order.OrderDate.ToString("MMMM dd, yyyy")</span>
                                        <br />
                                        <small class="text-muted">@order.OrderDate.ToString("hh:mm tt")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-truck me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Expected Delivery</small>
                                        @if (order.ExpectedDeliveryDate.HasValue)
                                        {
                                            <span class="fw-semibold">@order.ExpectedDeliveryDate.Value.ToString("MMMM dd, yyyy")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not specified</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-person me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Customer/Supplier</small>
                                        <span class="fw-semibold">@order.CustomerName</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Items Card -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-check me-2"></i>Order Items
                        </h5>
                        <span class="badge bg-secondary">@order.Items.Count items</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="fw-semibold">Product</th>
                                        <th class="fw-semibold">SKU</th>
                                        <th class="fw-semibold">Quantity</th>
                                        <th class="fw-semibold">Unit Price</th>
                                        <th class="fw-semibold">Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.Items)
                                    {
                                        <tr>
                                            <td>
                                                <div class="fw-semibold">@item.ProductName</div>
                                            </td>
                                            <td>
                                                <small class="text-muted">@item.SKU</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary fs-6">@item.Quantity</span>
                                            </td>
                                            <td>
                                                <span class="text-muted">$@item.UnitPrice.ToString("F2")</span>
                                            </td>
                                            <td>
                                                <span class="fw-semibold text-success">$@item.TotalPrice.ToString("F2")</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Order Total Footer -->
                        <div class="bg-light p-3 border-top">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-semibold">Order Total:</span>
                                <span class="h4 mb-0 text-success">$@order.TotalAmount.ToString("F2")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <!-- Order Actions Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-gear me-2"></i>Order Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (CanUpdateStatus(order.Status))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Update Status</label>
                                <select class="form-select" @bind="newStatus">
                                    <option value="">Select new status...</option>
                                    @foreach (var status in GetAvailableStatuses(order.Status))
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                            </div>
                            <button class="btn btn-primary w-100 mb-3" @onclick="UpdateStatus"
                                    disabled="@(string.IsNullOrEmpty(newStatus) || isUpdating)">
                                @if (isUpdating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-up-circle me-2"></i>
                                }
                                Update Status
                            </button>
                        }

                        @if (order.Status == "Pending")
                        {
                            <button class="btn btn-danger w-100 mb-3" @onclick="CancelOrder" disabled="@isUpdating">
                                <i class="bi bi-x-circle me-2"></i> Cancel Order
                            </button>
                        }

                        <hr />

                        <button class="btn btn-outline-secondary w-100" @onclick="NavigateToOrders">
                            <i class="bi bi-arrow-left me-2"></i> Back to Orders
                        </button>
                    </div>
                </div>

                <!-- Order Summary Card -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-receipt me-2"></i>Order Summary
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-6 text-center">
                                <div class="h4 mb-1">@order.Items.Count</div>
                                <small class="text-muted">Items</small>
                            </div>
                            <div class="col-6 text-center">
                                <div class="h4 mb-1">@order.Items.Sum(i => i.Quantity)</div>
                                <small class="text-muted">Total Quantity</small>
                            </div>
                        </div>

                        <hr class="my-3" />

                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">Order Total:</span>
                            <span class="h5 mb-0 text-success">$@order.TotalAmount.ToString("F2")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="bi bi-exclamation-circle me-2"></i>
            <div>@errorMessage</div>
        </div>
        <button class="btn btn-primary" @onclick="NavigateToOrders">
            <i class="bi bi-arrow-left me-1"></i> Back to Orders
        </button>
    }
</div>

@code {
    [Parameter] public int OrderId { get; set; }

    private OrderDto? order;
    private bool isLoading = true;
    private bool isUpdating = false;
    private string? errorMessage;
    private string? successMessage;
    private string newStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Since we don't have a GetOrderById method, we'll get all orders and find the one we need
            var response = await DistributorService.GetOrdersAsync(1, 100);

            if (response.Success && response.Data != null)
            {
                order = response.Data.Items.FirstOrDefault(o => o.Id == OrderId);
                if (order == null)
                {
                    errorMessage = "Order not found";
                }
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load order details";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading order {OrderId}", OrderId);
            errorMessage = "An error occurred while loading order details";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateStatus()
    {
        if (string.IsNullOrEmpty(newStatus) || order == null)
            return;

        try
        {
            isUpdating = true;
            errorMessage = null;
            successMessage = null;

            var response = await DistributorService.UpdateOrderStatusAsync(order.Id, newStatus);

            if (response.Success)
            {
                successMessage = $"Order status updated to {newStatus}";
                order.Status = newStatus;
                newStatus = "";
            }
            else
            {
                errorMessage = response.Message ?? "Failed to update order status";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status");
            errorMessage = "An error occurred while updating order status";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task CancelOrder()
    {
        if (order == null)
            return;

        try
        {
            isUpdating = true;
            errorMessage = null;
            successMessage = null;

            var response = await DistributorService.UpdateOrderStatusAsync(order.Id, "Cancelled");

            if (response.Success)
            {
                successMessage = "Order cancelled successfully";
                order.Status = "Cancelled";
            }
            else
            {
                errorMessage = response.Message ?? "Failed to cancel order";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cancelling order");
            errorMessage = "An error occurred while cancelling the order";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/distributor/orders");
    }

    private void ClearSuccessMessage()
    {
        successMessage = null;
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    private bool CanUpdateStatus(string currentStatus)
    {
        return currentStatus switch
        {
            "Pending" => true,
            "Processing" => true,
            "Confirmed" => true,
            "Shipped" => true,
            _ => false
        };
    }

    private List<string> GetAvailableStatuses(string currentStatus)
    {
        return currentStatus switch
        {
            "Pending" => new List<string> { "Processing", "Cancelled" },
            "Processing" => new List<string> { "Confirmed", "Cancelled" },
            "Confirmed" => new List<string> { "Shipped" },
            "Shipped" => new List<string> { "Delivered" },
            _ => new List<string>()
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Processing" => "bg-info",
            "Confirmed" => "bg-primary",
            "Shipped" => "bg-secondary",
            "Delivered" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}