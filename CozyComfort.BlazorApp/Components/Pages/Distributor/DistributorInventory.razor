@page "/distributor/inventory"
@attribute [Authorize(Roles = "Distributor")]
@inject IDistributorService DistributorService
@inject ILogger<DistributorInventory> Logger
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Inventory Management - Distributor</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item"><a href="/distributor/dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item active text-muted" aria-current="page">Inventory Management</li>
        </ol>
    </nav>

    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Inventory Management</h2>
            <p class="text-muted mb-0">Monitor stock levels and manage product inventory</p>
        </div>
        <button class="btn btn-primary" @onclick="RefreshInventory">
            <i class="bi bi-arrow-clockwise me-1"></i> Refresh
        </button>
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-circle me-2"></i>@errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Search and Filter Card -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" placeholder="Search by product name or SKU..."
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SearchProducts(); })" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="sortBy">
                        <option value="ProductName">Sort by Name</option>
                        <option value="SKU">Sort by SKU</option>
                        <option value="CurrentStock">Sort by Stock</option>
                        <option value="SellingPrice">Sort by Price</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100" @onclick="SearchProducts">
                        <i class="bi bi-funnel me-1"></i> Apply Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Inventory Table Card -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-box-seam me-2"></i>Product Inventory
            </h5>
            <div class="text-muted">
                @if (totalItems > 0)
                {
                    <small>Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems items</small>
                }
            </div>
        </div>
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading inventory...</p>
                </div>
            }
            else if (products != null && products.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="fw-semibold">Product Name</th>
                                <th class="fw-semibold">SKU</th>
                                <th class="fw-semibold">Purchase Price</th>
                                <th class="fw-semibold">Selling Price</th>
                                <th class="fw-semibold">Profit Margin</th>
                                <th class="fw-semibold">Current Stock</th>
                                <th class="fw-semibold">Available Stock</th>
                                <th class="fw-semibold">Min Level</th>
                                <th class="fw-semibold">Status</th>
                                <th class="fw-semibold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>
                                        <div class="fw-semibold">@product.ProductName</div>
                                    </td>
                                    <td>
                                        <small class="text-muted">@product.SKU</small>
                                    </td>
                                    <td>
                                        <span class="text-muted">$@product.PurchasePrice.ToString("F2")</span>
                                    </td>
                                    <td>
                                        <span class="fw-semibold">$@product.SellingPrice.ToString("F2")</span>
                                    </td>
                                    <td>
                                        <div class="text-success">
                                            <div class="fw-semibold">$@product.ProfitMargin.ToString("F2")</div>
                                            <small>(@product.ProfitPercentage.ToString("F1")%)</small>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary fs-6">@product.CurrentStock</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-info fs-6">@product.AvailableStock</span>
                                    </td>
                                    <td>
                                        <span class="text-muted">@product.MinStockLevel</span>
                                    </td>
                                    <td>
                                        @if (product.CurrentStock <= product.MinStockLevel)
                                        {
                                            <span class="badge bg-danger">Low Stock</span>
                                        }
                                        else if (product.CurrentStock > product.MinStockLevel * 2)
                                        {
                                            <span class="badge bg-success">In Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Normal</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-info" @onclick="() => CheckStock(product.Id)" title="Check Stock">
                                                <i class="bi bi-search"></i>
                                            </button>
                                            <button class="btn btn-outline-warning" @onclick="() => NavigateToReorder(product.Id)" title="Reorder">
                                                <i class="bi bi-arrow-repeat"></i>
                                            </button>
                                            <button class="btn btn-outline-primary" @onclick="() => NavigateToProductDetails(product.Id)" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Simple Pagination -->
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-content-between align-items-center p-3 bg-light">
                        <div class="text-muted">
                            <small>Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems items</small>
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="@(() => LoadProducts(currentPage - 1))" disabled="@(currentPage == 1)">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </li>
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="@(() => LoadProducts(pageNumber))">
                                            @pageNumber
                                        </button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="@(() => LoadProducts(currentPage + 1))" disabled="@(currentPage == totalPages)">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h5 class="mt-3 text-muted">No products found</h5>
                    <p class="text-muted">Try adjusting your search criteria or add products to inventory.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Stock Check Modal -->
@if (showStockModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-search me-2"></i>Stock Check Result
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseStockModal"></button>
                </div>
                <div class="modal-body">
                    @if (stockCheckResponse != null)
                    {
                        <div class="row g-3 mb-3">
                            <div class="col-6">
                                <div class="fw-semibold text-muted">Product:</div>
                                <div>@stockCheckResponse.ProductName</div>
                            </div>
                            <div class="col-6">
                                <div class="fw-semibold text-muted">SKU:</div>
                                <div>@stockCheckResponse.SKU</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="fw-semibold text-muted">Available Stock:</div>
                            <div class="h4 text-primary">@stockCheckResponse.AvailableStock units</div>
                        </div>

                        <div class="alert @(stockCheckResponse.IsAvailable ? "alert-success" : "alert-warning")">
                            <i class="bi bi-@(stockCheckResponse.IsAvailable ? "check-circle" : "exclamation-triangle") me-2"></i>
                            @stockCheckResponse.Message
                        </div>

                        @if (stockCheckResponse.NeedsReorder)
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle me-2"></i>
                                <strong>Reorder Suggestion:</strong> @stockCheckResponse.SuggestedReorderQuantity units
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseStockModal">Close</button>
                    @if (stockCheckResponse?.NeedsReorder == true)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => NavigateToReorder(selectedProductId)">
                            <i class="bi bi-cart-plus me-1"></i> Create Reorder
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DistributorProductDto> products = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string searchTerm = "";
    private string sortBy = "ProductName";

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;

    private bool showStockModal = false;
    private DistributorStockCheckResponse? stockCheckResponse;
    private int selectedProductId;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts(int page = 1)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            currentPage = page;

            var request = new PagedRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm,
                SortBy = sortBy,
                IsDescending = false
            };

            var response = await DistributorService.GetProductsAsync(request);

            if (response.Success && response.Data != null)
            {
                products = response.Data.Items;
                totalItems = response.Data.TotalCount;
                totalPages = response.Data.TotalPages;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load products";
                products = new List<DistributorProductDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            errorMessage = "An error occurred while loading products";
            products = new List<DistributorProductDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchProducts()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private async Task RefreshInventory()
    {
        await LoadProducts(currentPage);
    }

    private async Task CheckStock(int productId)
    {
        try
        {
            selectedProductId = productId;
            var request = new DistributorStockCheckRequest
            {
                ProductId = productId,
                QuantityRequested = 0 // Just checking current stock
            };

            var response = await DistributorService.CheckStockAsync(request);

            if (response.Success && response.Data != null)
            {
                stockCheckResponse = response.Data;
                showStockModal = true;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to check stock";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking stock for product {ProductId}", productId);
            errorMessage = "An error occurred while checking stock";
        }
    }

    private void CloseStockModal()
    {
        showStockModal = false;
        stockCheckResponse = null;
    }

    private void NavigateToReorder(int productId)
    {
        Navigation.NavigateTo($"/distributor/orders/create?productId={productId}");
    }

    private void NavigateToProductDetails(int productId)
    {
        Navigation.NavigateTo($"/distributor/products/{productId}");
    }
}