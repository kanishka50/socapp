@page "/distributor/orders"
@using CozyComfort.Shared.DTOs
@using CozyComfort.Shared.DTOs.Distributor
@using CozyComfort.BlazorApp.Services
@inject IDistributorService DistributorService
@inject IJSRuntime JSRuntime

<h3>Distributor Orders</h3>

@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (orders?.Items?.Any() == true)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Order Number</th>
                    <th>Customer</th>
                    <th>Date</th>
                    <th>Total Amount</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders.Items)
                {
                    <tr>
                        <td>@order.OrderNumber</td>
                        <td>@order.CustomerName</td>
                        <td>@order.OrderDate.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>$@order.TotalAmount.ToString("F2")</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(order.Status)">
                                @order.Status
                            </span>
                        </td>
                        <td>
                            @if (order.Status == "Pending")
                            {
                                <button class="btn btn-sm btn-success"
                                        @onclick="@(() => UpdateOrderStatus(order.Id, "Accepted"))">
                                    Accept
                                </button>
                                <button class="btn btn-sm btn-danger"
                                        @onclick="@(() => UpdateOrderStatus(order.Id, "Cancelled"))">
                                    Cancel
                                </button>
                            }
                            <button class="btn btn-sm btn-info"
                                    @onclick="@(() => ViewOrderDetails(order))">
                                View Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">No orders found.</div>
    }
}

<!-- Order Details Modal -->
@if (selectedOrder != null)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Details - @selectedOrder.OrderNumber</h5>
                    <button type="button" class="btn-close" @onclick="@(() => selectedOrder = null)"></button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in selectedOrder.Items)
                            {
                                <tr>
                                    <td>@item.ProductName</td>
                                    <td>@item.SKU</td>
                                    <td>@item.Quantity</td>
                                    <td>$@item.UnitPrice.ToString("F2")</td>
                                    <td>$@item.TotalPrice.ToString("F2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="4">Total</th>
                                <th>$@selectedOrder.TotalAmount.ToString("F2")</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => selectedOrder = null)">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResult<OrderDto>? orders;
    private bool isLoading = false;
    private OrderDto? selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {
            var response = await DistributorService.GetOrdersAsync(1, 20);
            if (response.Success && response.Data != null)
            {
                orders = response.Data;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateOrderStatus(int orderId, string newStatus)
    {
        try
        {
            var confirmMessage = newStatus == "Accepted"
                ? "Are you sure you want to accept this order? This will decrease your inventory."
                : "Are you sure you want to cancel this order?";

            if (!await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
                return;

            var response = await DistributorService.UpdateOrderStatusAsync(orderId, newStatus);
            if (response.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Order {newStatus.ToLower()} successfully!");
                await LoadOrders(); // Refresh the list
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to update order: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void ViewOrderDetails(OrderDto order)
    {
        selectedOrder = order;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Accepted" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}