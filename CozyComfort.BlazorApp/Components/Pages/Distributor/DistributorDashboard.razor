@page "/distributor/dashboard"
@attribute [Authorize(Roles = "Distributor")]
@inject IDistributorService DistributorService
@inject ILogger<DistributorDashboard> Logger
@inject NavigationManager Navigation

<PageTitle>Distributor Dashboard - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Distributor Dashboard</h2>
            <p class="text-muted mb-0">Central Distribution - Manage inventory and process orders</p>
        </div>
        <div class="text-muted">
            <i class="bi bi-calendar3"></i> @DateTime.Now.ToString("MMMM dd, yyyy")
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-primary h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-2">Total Products</h6>
                            <h3 class="mb-0">@totalProducts</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-box-seam fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-2">Low Stock Items</h6>
                            <h3 class="mb-0">@lowStockCount</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-exclamation-triangle fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-info h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-2">Pending Orders</h6>
                            <h3 class="mb-0">@pendingOrdersCount</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-hourglass-split fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-2">Total Inventory Value</h6>
                            <h3 class="mb-0">$@totalInventoryValue.ToString("N2")</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-currency-dollar fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Low Stock Alert Section -->
    @if (lowStockProducts != null && lowStockProducts.Any())
    {
        <div class="card mb-4">
            <div class="card-header bg-warning bg-opacity-10 border-warning">
                <h5 class="card-title mb-0 text-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Low Stock Alert
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Current Stock</th>
                                <th>Min Level</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in lowStockProducts)
                            {
                                <tr>
                                    <td class="fw-semibold">@product.ProductName</td>
                                    <td class="text-muted">@product.SKU</td>
                                    <td>
                                        <span class="badge bg-danger fs-6">@product.CurrentStock</span>
                                    </td>
                                    <td class="text-muted">@product.MinStockLevel</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToReorder(product.Id)">
                                            <i class="bi bi-plus-circle"></i> Reorder
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Recent Orders Section -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-clock-history me-2"></i>Recent Orders
            </h5>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => LoadDashboardData()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
                <button class="btn btn-sm btn-primary" @onclick="NavigateToOrders">
                    <i class="bi bi-eye"></i> View All Orders
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (isLoadingOrders)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading orders...</span>
                    </div>
                </div>
            }
            else if (recentOrders != null && recentOrders.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Order #</th>
                                <th>Type</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in recentOrders)
                            {
                                <tr>
                                    <td class="fw-semibold">@order.OrderNumber</td>
                                    <td>
                                        @if (order.OrderType == "Manufacturer")
                                        {
                                            <span class="badge bg-primary">
                                                <i class="bi bi-factory me-1"></i>From Manufacturer
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-shop me-1"></i>From Seller
                                            </span>
                                        }
                                    </td>
                                    <td>@order.CustomerName</td>
                                    <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                    <td class="fw-semibold">$@order.TotalAmount.ToString("N2")</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToOrderDetails(order.Id)">
                                            <i class="bi bi-eye"></i> View
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5 text-muted">
                    <i class="bi bi-inbox display-1"></i>
                    <h5 class="mt-3">No Recent Orders</h5>
                    <p>Orders will appear here once they start coming in.</p>
                    <button class="btn btn-primary" @onclick="NavigateToCreateOrder">
                        <i class="bi bi-plus-circle"></i> Create New Order
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int totalProducts = 0;
    private int lowStockCount = 0;
    private int pendingOrdersCount = 0;
    private decimal totalInventoryValue = 0;

    private List<DistributorProductDto> lowStockProducts = new();
    private List<OrderDto> recentOrders = new();

    private bool isLoadingOrders = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load products
            var productsResponse = await DistributorService.GetProductsAsync(new PagedRequest
            {
                PageNumber = 1,
                PageSize = 100
            });

            if (productsResponse.Success && productsResponse.Data != null)
            {
                var allProducts = productsResponse.Data.Items;
                totalProducts = productsResponse.Data.TotalCount;

                // Calculate low stock items
                lowStockProducts = allProducts
                    .Where(p => p.CurrentStock <= p.MinStockLevel)
                    .Take(5)
                    .ToList();
                lowStockCount = lowStockProducts.Count;

                // Calculate total inventory value
                totalInventoryValue = allProducts
                    .Sum(p => p.CurrentStock * p.PurchasePrice);
            }

            // Load recent orders
            await LoadRecentOrders();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            errorMessage = "An error occurred while loading dashboard data";
        }
    }

    private async Task LoadRecentOrders()
    {
        try
        {
            isLoadingOrders = true;
            var ordersResponse = await DistributorService.GetOrdersAsync(1, 5);

            if (ordersResponse.Success && ordersResponse.Data != null)
            {
                recentOrders = ordersResponse.Data.Items;
                pendingOrdersCount = ordersResponse.Data.Items.Count(o => o.Status == "Pending" || o.Status == "Processing");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading recent orders");
        }
        finally
        {
            isLoadingOrders = false;
        }
    }

    private void NavigateToCreateOrder()
    {
        Navigation.NavigateTo("/distributor/orders/create");
    }

    private void NavigateToInventory()
    {
        Navigation.NavigateTo("/distributor/inventory");
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/distributor/orders");
    }

    private void NavigateToReorder(int productId)
    {
        Navigation.NavigateTo($"/distributor/orders/create?productId={productId}");
    }

    private void NavigateToOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/distributor/orders/{orderId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Processing" => "bg-info",
            "Confirmed" => "bg-primary",
            "Shipped" => "bg-secondary",
            "Delivered" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}