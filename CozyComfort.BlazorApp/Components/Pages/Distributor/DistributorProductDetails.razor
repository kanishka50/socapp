@page "/distributor/products/{ProductId:int}"
@attribute [Authorize(Roles = "Distributor")]
@inject IDistributorService DistributorService
@inject NavigationManager Navigation
@inject ILogger<DistributorProductDetails> Logger

<PageTitle>Product Details - Distributor</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item"><a href="/distributor/dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/distributor/inventory" class="text-decoration-none">Inventory</a></li>
            <li class="breadcrumb-item active text-muted" aria-current="page">Product Details</li>
        </ol>
    </nav>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading product details...</p>
        </div>
    }
    else if (product != null)
    {
        <!-- Clean Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">@product.ProductName</h2>
                <p class="text-muted mb-0">SKU: @product.SKU</p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="NavigateToInventory">
                <i class="bi bi-arrow-left me-1"></i> Back to Inventory
            </button>
        </div>

        <div class="row">
            <!-- Main Content -->
            <div class="col-md-8">
                <!-- Product Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>Product Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-tag me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">SKU</small>
                                        <span class="fw-semibold">@product.SKU</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-factory me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Manufacturer Product ID</small>
                                        <span class="fw-semibold">@product.ManufacturerProductId</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        <!-- Pricing Information -->
                        <h6 class="fw-semibold mb-3">
                            <i class="bi bi-currency-dollar me-2"></i>Pricing Information
                        </h6>
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="text-center p-3 bg-light rounded">
                                    <div class="text-muted mb-1">Purchase Price</div>
                                    <div class="h4 mb-0">$@product.PurchasePrice.ToString("F2")</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="text-center p-3 bg-primary bg-opacity-10 rounded">
                                    <div class="text-muted mb-1">Selling Price</div>
                                    <div class="h4 mb-0 text-primary">$@product.SellingPrice.ToString("F2")</div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-4 mt-2">
                            <div class="col-md-6">
                                <div class="text-center p-3 bg-success bg-opacity-10 rounded">
                                    <div class="text-muted mb-1">Profit Margin</div>
                                    <div class="h5 mb-0 text-success">
                                        $@product.ProfitMargin.ToString("F2")
                                        <small>(@product.ProfitPercentage.ToString("F1")%)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="text-center p-3 bg-warning bg-opacity-10 rounded">
                                    <div class="text-muted mb-1">Minimum Stock Level</div>
                                    <div class="h5 mb-0 text-warning">@product.MinStockLevel units</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Stock Information Card -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-box-seam me-2"></i>Stock Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4 mb-4">
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-boxes display-4 mb-3 @(product.CurrentStock <= product.MinStockLevel ? "text-danger" : "text-success")"></i>
                                    <div class="text-muted mb-1">Current Stock</div>
                                    <div class="h3 @(product.CurrentStock <= product.MinStockLevel ? "text-danger" : "text-success")">
                                        @product.CurrentStock
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-check-circle display-4 mb-3 text-primary"></i>
                                    <div class="text-muted mb-1">Available Stock</div>
                                    <div class="h3 text-primary">@product.AvailableStock</div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-clock display-4 mb-3 text-warning"></i>
                                    <div class="text-muted mb-1">Reserved</div>
                                    <div class="h3 text-warning">@(product.CurrentStock - product.AvailableStock)</div>
                                </div>
                            </div>
                        </div>

                        @if (product.CurrentStock <= product.MinStockLevel)
                        {
                            <div class="alert alert-warning d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <div>
                                    <strong>Low Stock Alert:</strong> Stock level is below minimum. Consider placing a reorder.
                                </div>
                            </div>
                        }

                        <!-- Stock Level Progress -->
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="text-muted">Stock Level</span>
                                <span class="fw-semibold">@product.CurrentStock / @(product.MinStockLevel * 3) units</span>
                            </div>
                            @{
                                var stockPercentage = product.MinStockLevel > 0
                                ? (product.CurrentStock / (double)(product.MinStockLevel * 3)) * 100
                                : 100;
                                var progressClass = stockPercentage > 50 ? "bg-success" :
                                stockPercentage > 25 ? "bg-warning" : "bg-danger";
                            }
                            <div class="progress" style="height: 12px;">
                                <div class="progress-bar @progressClass" role="progressbar"
                                     style="width: @Math.Min(stockPercentage, 100)%"
                                     aria-valuenow="@stockPercentage" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <!-- Actions Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-gear me-2"></i>Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <button class="btn btn-primary" @onclick="CheckStock">
                                <i class="bi bi-search me-2"></i> Check Stock Availability
                            </button>
                            @if (product.CurrentStock <= product.MinStockLevel)
                            {
                                <button class="btn btn-warning" @onclick="NavigateToReorder">
                                    <i class="bi bi-arrow-repeat me-2"></i> Create Reorder
                                </button>
                            }
                            <hr class="my-2" />
                            <button class="btn btn-outline-secondary" @onclick="NavigateToInventory">
                                <i class="bi bi-arrow-left me-2"></i> Back to Inventory
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Financial Summary Card -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>Financial Summary
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">Total Investment:</span>
                                    <span class="fw-semibold">$@((product.CurrentStock * product.PurchasePrice).ToString("N2"))</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">Potential Revenue:</span>
                                    <span class="fw-semibold text-primary">$@((product.CurrentStock * product.SellingPrice).ToString("N2"))</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2">
                                    <span class="text-muted">Potential Profit:</span>
                                    <span class="fw-semibold text-success">$@((product.CurrentStock * product.ProfitMargin).ToString("N2"))</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="bi bi-exclamation-circle me-2"></i>
            <div>@errorMessage</div>
        </div>
        <button class="btn btn-primary" @onclick="NavigateToInventory">
            <i class="bi bi-arrow-left me-1"></i> Back to Inventory
        </button>
    }
</div>

<!-- Stock Check Modal -->
@if (showStockModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-search me-2"></i>Stock Availability Check
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseStockModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Enter quantity to check:</label>
                        <input type="number" class="form-control" @bind="quantityToCheck" min="1"
                               placeholder="Enter quantity..." />
                    </div>

                    @if (stockCheckResponse != null)
                    {
                        <div class="alert @(stockCheckResponse.IsAvailable ? "alert-success" : "alert-warning") d-flex align-items-start">
                            <i class="bi bi-@(stockCheckResponse.IsAvailable ? "check-circle" : "exclamation-triangle") me-2 mt-1"></i>
                            <div>@stockCheckResponse.Message</div>
                        </div>

                        @if (stockCheckResponse.NeedsReorder)
                        {
                            <div class="alert alert-info d-flex align-items-start">
                                <i class="bi bi-info-circle me-2 mt-1"></i>
                                <div>
                                    <strong>Reorder Suggestion:</strong> @stockCheckResponse.SuggestedReorderQuantity units
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="PerformStockCheck"
                            disabled="@(quantityToCheck <= 0 || isCheckingStock)">
                        @if (isCheckingStock)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                        }
                        Check Availability
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseStockModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int ProductId { get; set; }

    private DistributorProductDto? product;
    private bool isLoading = true;
    private string? errorMessage;

    private bool showStockModal = false;
    private int quantityToCheck = 1;
    private bool isCheckingStock = false;
    private DistributorStockCheckResponse? stockCheckResponse;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await DistributorService.GetProductByIdAsync(ProductId);

            if (response.Success && response.Data != null)
            {
                product = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load product details";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {ProductId}", ProductId);
            errorMessage = "An error occurred while loading product details";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CheckStock()
    {
        showStockModal = true;
        stockCheckResponse = null;
        quantityToCheck = 1;
    }

    private async Task PerformStockCheck()
    {
        if (product == null || quantityToCheck <= 0)
            return;

        try
        {
            isCheckingStock = true;

            var request = new DistributorStockCheckRequest
            {
                ProductId = product.Id,
                QuantityRequested = quantityToCheck
            };

            var response = await DistributorService.CheckStockAsync(request);

            if (response.Success && response.Data != null)
            {
                stockCheckResponse = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to check stock";
                CloseStockModal();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking stock");
            errorMessage = "An error occurred while checking stock";
            CloseStockModal();
        }
        finally
        {
            isCheckingStock = false;
        }
    }

    private void CloseStockModal()
    {
        showStockModal = false;
        stockCheckResponse = null;
        quantityToCheck = 1;
    }

    private void NavigateToReorder()
    {
        if (product?.ManufacturerProductId != null)
        {
            Navigation.NavigateTo($"/distributor/orders/create?productId={product.ManufacturerProductId}");
        }
    }

    private void NavigateToInventory()
    {
        Navigation.NavigateTo("/distributor/inventory");
    }
}