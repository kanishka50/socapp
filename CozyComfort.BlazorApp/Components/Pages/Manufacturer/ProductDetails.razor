@page "/manufacturer/products/{ProductId:int}"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<ProductDetails> Logger

<PageTitle>Product Details - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/manufacturer/dashboard">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Product Details</li>
        </ol>
    </nav>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (product != null)
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="card-title mb-0">@product.Name</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6 class="text-muted">SKU</h6>
                                <p class="fw-bold">@product.SKU</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted">Category</h6>
                                <p class="fw-bold">@product.Category</p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6 class="text-muted">Material</h6>
                                <p>@product.Material</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted">Size</h6>
                                <p>@product.Size</p>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6 class="text-muted">Description</h6>
                            <p>@product.Description</p>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <h6 class="text-muted">Base Price</h6>
                                <p class="h5 text-primary">$@product.Price.ToString("F2")</p>
                            </div>
                            <div class="col-md-4">
                                <h6 class="text-muted">Status</h6>
                                <p>
                                    @if (product.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Stock Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">Current Stock</span>
                                <span class="fw-bold fs-5">@product.CurrentStock</span>
                            </div>
                            <div class="progress mt-2" style="height: 10px;">
                                @{
                                    var stockPercentage = product.MinStockLevel > 0 
                                        ? (product.CurrentStock / (double)(product.MinStockLevel * 3)) * 100 
                                        : 100;
                                    var progressClass = stockPercentage > 50 ? "bg-success" : 
                                                       stockPercentage > 25 ? "bg-warning" : "bg-danger";
                                }
                                <div class="progress-bar @progressClass" role="progressbar" 
                                     style="width: @Math.Min(stockPercentage, 100)%"></div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Available Stock</span>
                                <span class="fw-bold">@product.AvailableStock</span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Min Stock Level</span>
                                <span>@product.MinStockLevel</span>
                            </div>
                        </div>

                        @if (product.CurrentStock <= product.MinStockLevel)
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle"></i> Stock is below minimum level
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h6 class="card-title">Actions</h6>
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{ProductId}/edit"))">
                                <i class="bi bi-pencil"></i> Edit Product
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{ProductId}/stock"))">
                                <i class="bi bi-box-seam"></i> Manage Stock
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/dashboard"))">
                                <i class="bi bi-arrow-left"></i> Back to Dashboard
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-circle"></i> @errorMessage
        </div>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/dashboard"))">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </button>
    }
</div>

@code {
    [Parameter] public int ProductId { get; set; }

    private ProductDto? product;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await ManufacturerService.GetProductByIdAsync(ProductId);
            
            if (response.Success && response.Data != null)
            {
                product = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load product details";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {ProductId}", ProductId);
            errorMessage = "An error occurred while loading product details";
        }
        finally
        {
            isLoading = false;
        }
    }
}