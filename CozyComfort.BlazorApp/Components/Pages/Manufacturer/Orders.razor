@page "/manufacturer/orders"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<Orders> Logger

<PageTitle>Orders - Manufacturer</PageTitle>

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3">Distributor Orders</h1>
        </div>
    </div>

    <!-- Status Filter Tabs -->
    <!-- Status Filter Tabs -->
<ul class="nav nav-tabs mb-4">
    <li class="nav-item">
        <a class="nav-link @(statusFilter == "" ? "active" : "")"
           href="#" @onclick="() => FilterByStatus(string.Empty)" @onclick:preventDefault="true">
            All Orders
            @if (totalOrders > 0)
            {
                <span class="badge bg-secondary ms-1">@totalOrders</span>
            }
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(statusFilter == "Pending" ? "active" : "")"
               href="#" @onclick="() => FilterByStatus(\" Pending\")" @onclick:preventDefault="true">
            Pending
            @if (pendingCount > 0)
            {
                <span class="badge bg-warning ms-1">@pendingCount</span>
            }
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(statusFilter == "Accepted" ? "active" : "")"
           href="#" @onclick="() => FilterByStatus(\"Accepted\")" @onclick:preventDefault="true">
            Accepted
            @if (acceptedCount > 0)
            {
                <span class="badge bg-success ms-1">@acceptedCount</span>
            }
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(statusFilter == "Cancelled" ? "active" : "")"
           href="#" @onclick="() => FilterByStatus(\"Cancelled\")" @onclick:preventDefault="true">
            Cancelled
            @if (cancelledCount > 0)
            {
                <span class="badge bg-danger ms-1">@cancelledCount</span>
            }
        </a>
    </li>
</ul>

    @if (loading)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No orders found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Distributor</th>
                        <th>Date</th>
                        <th>Items</th>
                        <th>Total Amount</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in filteredOrders)
                    {
                        <tr>
                            <td>
                                <a href="/manufacturer/orders/@order.Id">@order.OrderNumber</a>
                            </td>
                            <td>@order.DistributorName</td>
                            <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                            <td>@order.Items.Count items</td>
                            <td>$@order.TotalAmount.ToString("N2")</td>
                            <td>
                                @switch (order.Status)
                                {
                                    case "Pending":
                                        <span class="badge bg-warning">Pending</span>
                                        break;
                                    case "Accepted":
                                        <span class="badge bg-success">Accepted</span>
                                        break;
                                    case "Cancelled":
                                        <span class="badge bg-danger">Cancelled</span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">@order.Status</span>
                                        break;
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => ViewOrder(order.Id)">
                                    <i class="bi bi-eye"></i> View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <nav aria-label="Orders pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="() => LoadOrders(currentPage - 1)"
                           @onclick:preventDefault="true">Previous</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <a class="page-link" href="#" @onclick="() => LoadOrders(pageNumber)"
                               @onclick:preventDefault="true">@pageNumber</a>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="() => LoadOrders(currentPage + 1)"
                           @onclick:preventDefault="true">Next</a>
                    </li>
                </ul>
            </nav>
        }
    }
</div>

@code {
    private List<ManufacturerOrderDto> orders = new();
    private List<ManufacturerOrderDto> filteredOrders = new();
    private bool loading = true;
    private string statusFilter = "";

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    private int totalOrders = 0;
    private int pendingCount = 0;
    private int acceptedCount = 0;
    private int cancelledCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders(1);
    }

    private async Task LoadOrders(int page)
    {
        try
        {
            loading = true;
            currentPage = page;

            var response = await ManufacturerService.GetOrdersAsync(currentPage, pageSize);

            if (response.Success && response.Data != null)
            {
                orders = response.Data.Items;
                totalOrders = response.Data.TotalCount;
                totalPages = (int)Math.Ceiling(totalOrders / (double)pageSize);

                // Count orders by status
                pendingCount = orders.Count(o => o.Status == "Pending");
                acceptedCount = orders.Count(o => o.Status == "Accepted");
                cancelledCount = orders.Count(o => o.Status == "Cancelled");

                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading orders");
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterByStatus(string status)
    {
        statusFilter = status;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(statusFilter))
        {
            filteredOrders = orders;
        }
        else
        {
            filteredOrders = orders.Where(o => o.Status == statusFilter).ToList();
        }
    }

    private void ViewOrder(int orderId)
    {
        Navigation.NavigateTo($"/manufacturer/orders/{orderId}");
    }
}