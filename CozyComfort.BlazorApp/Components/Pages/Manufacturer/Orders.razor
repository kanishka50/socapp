@page "/manufacturer/orders"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<Orders> Logger

<PageTitle>Orders - Manufacturer</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Distributor Orders</h2>
            <p class="text-muted mb-0">Manage incoming orders from distributors</p>
        </div>
        <button class="btn btn-outline-secondary" @onclick="@(() => LoadOrders(currentPage))">
            <i class="bi bi-arrow-clockwise me-1"></i> Refresh
        </button>
    </div>

    <!-- Status Filter Tabs -->
    <div class="card mb-4">
        <div class="card-header p-0">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "" ? "active" : "")"
                            @onclick="() => FilterByStatus(string.Empty)">
                        <i class="bi bi-list me-2"></i>
                        All Orders
                        @if (totalOrders > 0)
                        {
                            <span class="badge bg-secondary ms-2">@totalOrders</span>
                        }
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "Pending" ? "active" : "")"
                            @onclick="@(() => FilterByStatus("Pending"))">
                        <i class="bi bi-hourglass me-2"></i>
                        Pending
                        @if (pendingCount > 0)
                        {
                            <span class="badge bg-warning ms-2">@pendingCount</span>
                        }
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "Accepted" ? "active" : "")"
                            @onclick="@(() => FilterByStatus("Accepted"))">
                        <i class="bi bi-check-circle me-2"></i>
                        Accepted
                        @if (acceptedCount > 0)
                        {
                            <span class="badge bg-success ms-2">@acceptedCount</span>
                        }
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "Cancelled" ? "active" : "")"
                            @onclick="@(() => FilterByStatus("Cancelled"))">
                        <i class="bi bi-x-circle me-2"></i>
                        Cancelled
                        @if (cancelledCount > 0)
                        {
                            <span class="badge bg-danger ms-2">@cancelledCount</span>
                        }
                    </button>
                </li>
            </ul>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading orders...</p>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="bi bi-inbox display-1 text-muted"></i>
                <h5 class="mt-3 text-muted">No Orders Found</h5>
                @if (string.IsNullOrEmpty(statusFilter))
                {
                    <p class="text-muted">Orders from distributors will appear here once they start coming in.</p>
                }
                else
                {
                    <p class="text-muted">No @statusFilter.ToLower() orders found.</p>
                    <button class="btn btn-outline-secondary" @onclick="() => FilterByStatus(string.Empty)">
                        <i class="bi bi-list me-1"></i> View All Orders
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Orders Table Card -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-list-check me-2"></i>
                    @if (string.IsNullOrEmpty(statusFilter))
                    {
                        <span>All Orders</span>
                    }
                    else
                    {
                        <span>@statusFilter Orders</span>
                    }
                </h5>
                <div class="text-muted">
                    <small>Showing @filteredOrders.Count of @totalOrders orders</small>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="fw-semibold">Order #</th>
                                <th class="fw-semibold">Distributor</th>
                                <th class="fw-semibold">Date</th>
                                <th class="fw-semibold">Items</th>
                                <th class="fw-semibold">Total Amount</th>
                                <th class="fw-semibold">Status</th>
                                <th class="fw-semibold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in filteredOrders)
                            {
                                <tr>
                                    <td>
                                        <div class="fw-semibold">@order.OrderNumber</div>
                                        <small class="text-muted">ID: @order.Id</small>
                                    </td>
                                    <td>
                                        <div class="fw-semibold">@order.DistributorName</div>
                                        <small class="text-muted">Order #@order.DistributorOrderNumber</small>
                                    </td>
                                    <td>
                                        <div>@order.OrderDate.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@order.OrderDate.ToString("HH:mm")</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">@order.Items.Count items</span>
                                    </td>
                                    <td>
                                        <div class="fw-semibold text-success">$@order.TotalAmount.ToString("N2")</div>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewOrder(order.Id)" title="View Details">
                                            <i class="bi bi-eye me-1"></i> View
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Simple Pagination -->
        @if (totalPages > 1)
        {
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="text-muted">
                    <small>Page @currentPage of @totalPages</small>
                </div>
                <nav>
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => LoadOrders(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => LoadOrders(pageNumber)">
                                    @pageNumber
                                </button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => LoadOrders(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
</div>

@code {
    private List<ManufacturerOrderDto> orders = new();
    private List<ManufacturerOrderDto> filteredOrders = new();
    private bool loading = true;
    private string statusFilter = "";

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    private int totalOrders = 0;
    private int pendingCount = 0;
    private int acceptedCount = 0;
    private int cancelledCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders(1);
    }

    private async Task LoadOrders(int page)
    {
        try
        {
            loading = true;
            currentPage = page;

            var response = await ManufacturerService.GetOrdersAsync(currentPage, pageSize);

            if (response.Success && response.Data != null)
            {
                orders = response.Data.Items;
                totalOrders = response.Data.TotalCount;
                totalPages = (int)Math.Ceiling(totalOrders / (double)pageSize);

                // Count orders by status
                pendingCount = orders.Count(o => o.Status == "Pending");
                acceptedCount = orders.Count(o => o.Status == "Accepted");
                cancelledCount = orders.Count(o => o.Status == "Cancelled");

                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading orders");
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterByStatus(string status)
    {
        statusFilter = status;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(statusFilter))
        {
            filteredOrders = orders;
        }
        else
        {
            filteredOrders = orders.Where(o => o.Status == statusFilter).ToList();
        }
    }

    private void ViewOrder(int orderId)
    {
        Navigation.NavigateTo($"/manufacturer/orders/{orderId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Accepted" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}