@page "/manufacturer/dashboard"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject ILogger<ManufacturerDashboard> Logger
@inject NavigationManager Navigation

<PageTitle>Manufacturer Dashboard - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Manufacturer Dashboard</h2>
            <p class="text-muted mb-0">Manage blanket production capacity and stock levels</p>
        </div>
        <div class="text-muted">
            <i class="bi bi-calendar3"></i> @DateTime.Now.ToString("MMMM dd, yyyy")
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading dashboard...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Total Products</h6>
                                <h3 class="mb-0">@totalProducts</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-box-seam fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-success h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Total Stock Value</h6>
                                <h3 class="mb-0">$@totalStockValue.ToString("N2")</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-currency-dollar fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-warning h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Low Stock Items</h6>
                                <h3 class="mb-0">@lowStockCount</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-exclamation-triangle fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-info h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Production Capacity</h6>
                                <h3 class="mb-0">@totalDailyCapacity</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-gear-wide-connected fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Low Stock Alert Section -->
        @if (lowStockProducts != null && lowStockProducts.Any())
        {
            <div class="card mb-4">
                <div class="card-header bg-warning bg-opacity-10 border-warning">
                    <h5 class="card-title mb-0 text-warning">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Low Stock Alert
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th>SKU</th>
                                    <th>Current Stock</th>
                                    <th>Min Level</th>
                                    <th>Daily Capacity</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in lowStockProducts.Take(5))
                                {
                                    <tr>
                                        <td class="fw-semibold">@product.Name</td>
                                        <td class="text-muted">@product.SKU</td>
                                        <td>
                                            <span class="badge bg-danger fs-6">@product.CurrentStock</span>
                                        </td>
                                        <td class="text-muted">@product.MinStockLevel</td>
                                        <td class="text-muted">N/A</td> @* ProductionCapacityPerDay not in ProductDto *@
                                        <td>
                                            <button class="btn btn-sm btn-primary" @onclick="() => NavigateToInventory()">
                                                <i class="bi bi-plus-circle"></i> Increase Production
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }

        <!-- Recent Production Activity -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-clock-history me-2"></i>Production Overview
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshDashboard">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="NavigateToInventory">
                        <i class="bi bi-eye"></i> View Full Inventory
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (recentProducts != null && recentProducts.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Product Name</th>
                                    <th>Category</th>
                                    <th>Current Stock</th>
                                    <th>Available Stock</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in recentProducts.Take(5))
                                {
                                    <tr>
                                        <td class="fw-semibold">@product.Name</td>
                                        <td>@product.Category</td>
                                        <td>@product.CurrentStock</td>
                                        <td>@product.AvailableStock</td>
                                        <td>
                                            @if (product.CurrentStock <= product.MinStockLevel)
                                            {
                                                <span class="badge bg-danger">Low Stock</span>
                                            }
                                            else if (product.IsActive)
                                            {
                                                <span class="badge bg-success">In Stock</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToProductDetails(product.Id)">
                                                <i class="bi bi-eye"></i> View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5 text-muted">
                        <i class="bi bi-factory display-1"></i>
                        <h5 class="mt-3">No Products Yet</h5>
                        <p>Start by adding your first blanket product.</p>
                        <button class="btn btn-primary" @onclick="NavigateToAddProduct">
                            <i class="bi bi-plus-circle"></i> Add First Product
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;

    // Dashboard metrics
    private int totalProducts = 0;
    private decimal totalStockValue = 0;
    private int lowStockCount = 0;
    private int totalDailyCapacity = 0;

    private List<ProductDto> lowStockProducts = new();
    private List<ProductDto> recentProducts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Load products for metrics (small sample for dashboard)
            var request = new PagedRequest
            {
                PageNumber = 1,
                PageSize = 20, // Just for dashboard metrics
                SortBy = "Name",
                IsDescending = false
            };

            var response = await ManufacturerService.GetProductsAsync(request);

            if (response.Success && response.Data != null)
            {
                recentProducts = response.Data.Items;
                totalProducts = response.Data.TotalCount;

                // Calculate metrics
                lowStockProducts = recentProducts.Where(p => p.CurrentStock <= p.MinStockLevel).ToList();
                lowStockCount = lowStockProducts.Count;
                // Note: ProductionCapacityPerDay not available in ProductDto, calculate from other data
                totalDailyCapacity = recentProducts.Count * 10; // Placeholder calculation

                // Calculate total stock value (approximate)
                // Note: ManufacturingCost not available in ProductDto, using Price as approximation
                totalStockValue = recentProducts.Sum(p => p.CurrentStock * p.Price);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            errorMessage = "Failed to load dashboard data. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private void NavigateToAddProduct()
    {
        Navigation.NavigateTo("/manufacturer/products/add");
    }

    private void NavigateToInventory()
    {
        Navigation.NavigateTo("/manufacturer/inventory");
    }

    private void NavigateToProductDetails(int productId)
    {
        Navigation.NavigateTo($"/manufacturer/products/{productId}");
    }
}