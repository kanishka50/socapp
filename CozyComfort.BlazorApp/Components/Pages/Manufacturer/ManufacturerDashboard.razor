@page "/manufacturer/dashboard"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject ILogger<ManufacturerDashboard> Logger
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Manufacturer Dashboard - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <h1 class="h3 mb-4">Manufacturer Dashboard - Cozy Comfort</h1>
    <p class="text-muted">Manage blanket production capacity and stock levels</p>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Add New Product Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">Add New Blanket Model</h5>
        </div>
        <div class="card-body">
            <EditForm Model="newProduct" OnValidSubmit="HandleCreateProduct">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="row g-3">
                    <div class="col-md-4">
                        <label for="productName" class="form-label">Product Name</label>
                        <InputText id="productName" class="form-control" @bind-Value="newProduct.Name" placeholder="Product name" />
                    </div>
                    <div class="col-md-4">
                        <label for="category" class="form-label">Category</label>
                        <InputSelect id="category" class="form-control" @bind-Value="newProduct.Category">
                            <option value="">Select category</option>
                            <option value="Wool Blankets">Wool Blankets</option>
                            <option value="Cotton Blankets">Cotton Blankets</option>
                            <option value="Fleece Blankets">Fleece Blankets</option>
                            <option value="Weighted Blankets">Weighted Blankets</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-4">
                        <label for="price" class="form-label">Base Price</label>
                        <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" placeholder="0.00" />
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-md-4">
                        <label for="material" class="form-label">Material</label>
                        <InputText id="material" class="form-control" @bind-Value="newProduct.Material" placeholder="e.g., 100% Merino Wool" />
                    </div>
                    <div class="col-md-4">
                        <label for="size" class="form-label">Size</label>
                        <InputText id="size" class="form-control" @bind-Value="newProduct.Size" placeholder="e.g., Queen (90x90 inches)" />
                    </div>
                    <div class="col-md-4">
                        <label for="sku" class="form-label">SKU</label>
                        <InputText id="sku" class="form-control" @bind-Value="newProduct.SKU" placeholder="e.g., LWB-Q-001" />
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-md-3">
                        <label for="initialStock" class="form-label">Initial Stock</label>
                        <InputNumber id="initialStock" class="form-control" @bind-Value="newProduct.InitialStock" />
                    </div>
                    <div class="col-md-3">
                        <label for="minStock" class="form-label">Minimum Stock Level</label>
                        <InputNumber id="minStock" class="form-control" @bind-Value="newProduct.MinStockLevel" />
                    </div>
                    <div class="col-md-3">
                        <label for="prodCapacity" class="form-label">Production Capacity/Day</label>
                        <InputNumber id="prodCapacity" class="form-control" @bind-Value="newProduct.ProductionCapacityPerDay" />
                    </div>
                    <div class="col-md-3">
                        <label for="leadTime" class="form-label">Lead Time (Days)</label>
                        <InputNumber id="leadTime" class="form-control" @bind-Value="newProduct.LeadTimeDays" />
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-md-6">
                        <label for="manufacturingCost" class="form-label">Manufacturing Cost</label>
                        <InputNumber id="manufacturingCost" class="form-control" @bind-Value="newProduct.ManufacturingCost" placeholder="0.00" />
                    </div>
                    <div class="col-md-6">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="newProduct.Description" rows="2" />
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Add Product
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Current Inventory Section -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Current Blanket Inventory</h5>
            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshProducts">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (products != null && products.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>Category</th>
                                <th>SKU</th>
                                <th>Base Price</th>
                                <th>Current Stock</th>
                                <th>Available Stock</th>
                                <th>Min Stock Level</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>@product.Name</td>
                                    <td>@product.Category</td>
                                    <td>@product.SKU</td>
                                    <td>$@product.Price.ToString("F2")</td>
                                    <td>@product.CurrentStock</td>
                                    <td>@product.AvailableStock</td>
                                    <td>@product.MinStockLevel</td>
                                    <td>
                                        @if (product.CurrentStock <= product.MinStockLevel)
                                        {
                                            <span class="badge bg-danger">Low Stock</span>
                                        }
                                        else if (product.IsActive)
                                        {
                                            <span class="badge bg-success">In Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToProductDetails(product.Id)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning" @onclick="() => NavigateToEditProduct(product.Id)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProduct(product.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadProducts(currentPage - 1)" disabled="@(currentPage == 1)">
                                    Previous
                                </button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadProducts(pageNumber)">
                                        @pageNumber
                                    </button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadProducts(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> No products found. Add your first product above.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ProductDto> products = new();
    private CreateProductDto newProduct = new();
    private bool isLoading = false;
    private bool isSubmitting = false;
    private string? errorMessage;
    private string? successMessage;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts(int page = 1)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            currentPage = page;

            var request = new PagedRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SortBy = "Name",
                IsDescending = false
            };

            var response = await ManufacturerService.GetProductsAsync(request);

            if (response.Success && response.Data != null)
            {
                products = response.Data.Items;
                totalItems = response.Data.TotalCount;
                totalPages = response.Data.TotalPages;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load products";
                products = new List<ProductDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            errorMessage = "An error occurred while loading products";
            products = new List<ProductDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleCreateProduct()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            var response = await ManufacturerService.CreateProductAsync(newProduct);

            if (response.Success)
            {
                successMessage = "Product created successfully!";
                newProduct = new CreateProductDto(); // Reset form
                await LoadProducts(); // Refresh list

                // Clear success message after 3 seconds
                await Task.Delay(3000);
                successMessage = null;
                StateHasChanged();
            }
            else
            {
                errorMessage = response.Message ?? "Failed to create product";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating product");
            errorMessage = "An error occurred while creating the product";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task RefreshProducts()
    {
        await LoadProducts(currentPage);
    }

    private void NavigateToProductDetails(int productId)
    {
        Navigation.NavigateTo($"/manufacturer/products/{productId}");
    }

    private void NavigateToEditProduct(int productId)
    {
        Navigation.NavigateTo($"/manufacturer/products/{productId}/edit");
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");

        if (!confirmed)
            return;

        try
        {
            var response = await ManufacturerService.DeleteProductAsync(productId);

            if (response.Success)
            {
                successMessage = "Product deleted successfully!";
                await LoadProducts(currentPage);
            }
            else
            {
                errorMessage = response.Message ?? "Failed to delete product";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting product {ProductId}", productId);
            errorMessage = "An error occurred while deleting the product";
        }
    }
}