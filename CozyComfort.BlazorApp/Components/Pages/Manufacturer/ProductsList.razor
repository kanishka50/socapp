@page "/manufacturer/products"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<ProductsList> Logger

<PageTitle>Products - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Products Management</h2>
            <p class="text-muted mb-0">Manage your blanket product catalog</p>
        </div>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/products/add"))">
            <i class="bi bi-plus-circle me-1"></i> Add New Product
        </button>
    </div>

    <!-- Search and Filter Card -->
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="bi bi-funnel me-2"></i>Search & Filter
            </h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" placeholder="Search products by name or SKU..."
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SearchProducts(); })" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="sortBy" @bind:event="onchange" @bind:after="SearchProducts">
                        <option value="Name">Sort by Name</option>
                        <option value="SKU">Sort by SKU</option>
                        <option value="Price">Sort by Price</option>
                        <option value="CurrentStock">Sort by Stock</option>
                        <option value="Category">Sort by Category</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100" @onclick="SearchProducts">
                        <i class="bi bi-search me-1"></i> Apply Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-circle me-2"></i>@errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Products Grid -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading products...</p>
        </div>
    }
    else if (products != null && products.Any())
    {
        <!-- Products Grid Header -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">
                <i class="bi bi-grid me-2"></i>Products
                <span class="badge bg-secondary ms-2">@totalItems total</span>
            </h5>
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems products
            </small>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @foreach (var product in products)
            {
                <div class="col">
                    <div class="card h-100 product-card">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 200px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                            </div>
                        }

                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title fw-semibold">@product.Name</h6>
                            <p class="card-text text-muted small mb-2">SKU: @product.SKU</p>

                            <div class="mb-2">
                                <span class="h6 text-primary mb-0">$@product.Price.ToString("F2")</span>
                                <small class="text-muted ms-2">@product.Category</small>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="badge @(product.CurrentStock <= product.MinStockLevel ? "bg-danger" : "bg-success") fs-6">
                                    @product.CurrentStock units
                                </span>
                                <small class="text-muted">Min: @product.MinStockLevel</small>
                            </div>

                            @if (product.CurrentStock <= product.MinStockLevel)
                            {
                                <div class="alert alert-warning alert-sm py-1 px-2 mb-3">
                                    <small><i class="bi bi-exclamation-triangle me-1"></i>Low Stock</small>
                                </div>
                            }

                            <div class="mt-auto">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-sm btn-primary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{product.Id}"))">
                                        <i class="bi bi-eye me-1"></i> View Details
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{product.Id}/edit"))">
                                        <i class="bi bi-pencil me-1"></i> Edit
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Simple Pagination -->
        @if (totalPages > 1)
        {
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="text-muted">
                    <small>Page @currentPage of @totalPages</small>
                </div>
                <nav>
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => LoadProducts(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => LoadProducts(pageNumber)">
                                    @pageNumber
                                </button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => LoadProducts(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
    else
    {
        <!-- Empty State -->
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="bi bi-inbox display-1 text-muted"></i>
                <h5 class="mt-3 text-muted">No Products Found</h5>
                @if (string.IsNullOrEmpty(searchTerm))
                {
                    <p class="text-muted">Start by adding your first blanket product to the catalog.</p>
                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/products/add"))">
                        <i class="bi bi-plus-circle me-1"></i> Add First Product
                    </button>
                }
                else
                {
                    <p class="text-muted">No products match your search criteria. Try adjusting your search terms.</p>
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="bi bi-x-circle me-1"></i> Clear Search
                    </button>
                }
            </div>
        </div>
    }
</div>

<style>
    .product-card {
        transition: all 0.2s ease;
        border: 1px solid #e2e8f0;
    }

        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-color: #cbd5e1;
        }

    .alert-sm {
        font-size: 0.75rem;
    }
</style>

@code {
    private List<ProductDto> products = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string searchTerm = "";
    private string sortBy = "Name";

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts(int page = 1)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            currentPage = page;

            var request = new PagedRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm,
                SortBy = sortBy,
                IsDescending = false
            };

            var response = await ManufacturerService.GetProductsAsync(request);

            if (response.Success && response.Data != null)
            {
                products = response.Data.Items;
                totalItems = response.Data.TotalCount;
                totalPages = response.Data.TotalPages;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load products";
                products = new List<ProductDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            errorMessage = "An error occurred while loading products";
            products = new List<ProductDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchProducts()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        sortBy = "Name";
        await SearchProducts();
    }
}