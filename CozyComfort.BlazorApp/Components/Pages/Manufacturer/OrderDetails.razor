@page "/manufacturer/orders/{OrderId:int}"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<OrderDetails> Logger

<PageTitle>Order Details - Manufacturer</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item"><a href="/manufacturer/dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/manufacturer/orders" class="text-decoration-none">Orders</a></li>
            <li class="breadcrumb-item active text-muted" aria-current="page">@(order?.OrderNumber ?? "Order Details")</li>
        </ol>
    </nav>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading order details...</p>
        </div>
    }
    else if (order == null)
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <div>Order not found.</div>
        </div>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/orders"))">
            <i class="bi bi-arrow-left me-1"></i> Back to Orders
        </button>
    }
    else
    {
        <!-- Clean Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">Order #@order.OrderNumber</h2>
                <p class="text-muted mb-0">
                    <span class="badge @GetStatusBadgeClass(order.Status) me-2">@order.Status</span>
                    From @order.DistributorName
                </p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/orders"))">
                <i class="bi bi-arrow-left me-1"></i> Back to Orders
            </button>
        </div>

        <!-- Alert Messages -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle me-2"></i>@successMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-circle me-2"></i>@errorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="row">
            <!-- Main Content -->
            <div class="col-md-8">
                <!-- Order Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>Order Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-hash me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Order Number</small>
                                        <span class="fw-semibold">@order.OrderNumber</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-flag me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Status</small>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-building me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Distributor</small>
                                        <span class="fw-semibold">@order.DistributorName</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-receipt me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Distributor Order #</small>
                                        <span class="fw-semibold">@order.DistributorOrderNumber</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-calendar me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Order Date</small>
                                        <span class="fw-semibold">@order.OrderDate.ToString("MMMM dd, yyyy")</span>
                                        <br />
                                        <small class="text-muted">@order.OrderDate.ToString("HH:mm")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-currency-dollar me-2 text-muted"></i>
                                    <div>
                                        <small class="text-muted d-block">Total Amount</small>
                                        <span class="h5 text-success mb-0">$@order.TotalAmount.ToString("N2")</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(order.Notes))
                        {
                            <hr class="my-4" />
                            <div class="d-flex align-items-start">
                                <i class="bi bi-sticky me-2 text-muted mt-1"></i>
                                <div>
                                    <small class="text-muted d-block">Notes</small>
                                    <p class="mb-0">@order.Notes</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Order Items Card -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-check me-2"></i>Order Items
                        </h5>
                        <span class="badge bg-secondary">@order.Items.Count items</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="fw-semibold">Product</th>
                                        <th class="fw-semibold">SKU</th>
                                        <th class="fw-semibold">Quantity</th>
                                        <th class="fw-semibold">Unit Price</th>
                                        <th class="fw-semibold">Total</th>
                                        <th class="fw-semibold">Available Stock</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.Items)
                                    {
                                        var stockInfo = stockLevels.FirstOrDefault(s => s.ProductId == item.ProductId);
                                        <tr>
                                            <td>
                                                <div class="fw-semibold">@item.ProductName</div>
                                            </td>
                                            <td>
                                                <small class="text-muted">@item.SKU</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary fs-6">@item.Quantity</span>
                                            </td>
                                            <td>
                                                <span class="text-muted">$@item.UnitPrice.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <span class="fw-semibold text-success">$@item.TotalPrice.ToString("N2")</span>
                                            </td>
                                            <td>
                                                @if (stockInfo != null)
                                                {
                                                    <span class="@(stockInfo.AvailableStock >= item.Quantity ? "text-success fw-semibold" : "text-danger fw-semibold")">
                                                        @stockInfo.AvailableStock units
                                                    </span>
                                                    @if (stockInfo.AvailableStock < item.Quantity)
                                                    {
                                                        <br />
                                                        <small class="text-danger">⚠ Insufficient stock</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Loading...</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Order Total Footer -->
                        <div class="bg-light p-3 border-top">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-semibold">Order Total:</span>
                                <span class="h4 mb-0 text-success">$@order.TotalAmount.ToString("N2")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <!-- Actions Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-gear me-2"></i>Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (order.Status == "Pending")
                        {
                            <div class="mb-3">
                                <label for="statusNotes" class="form-label fw-semibold">Notes (Optional)</label>
                                <textarea id="statusNotes" class="form-control" rows="3" @bind="statusNotes"
                                          placeholder="Add any notes about this decision"></textarea>
                            </div>

                            <div class="d-grid gap-3">
                                <button class="btn btn-success" @onclick="AcceptOrder"
                                        disabled="@(!CanAcceptOrder() || isProcessing)">
                                    @if (isProcessing && processingAction == "Accepted")
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check-circle me-2"></i>
                                    }
                                    Accept Order
                                </button>
                                <button class="btn btn-danger" @onclick="CancelOrder"
                                        disabled="@isProcessing">
                                    @if (isProcessing && processingAction == "Cancelled")
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle me-2"></i>
                                    }
                                    Cancel Order
                                </button>
                            </div>

                            @if (!CanAcceptOrder())
                            {
                                <div class="alert alert-warning mt-3 mb-0">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    Cannot accept order due to insufficient stock.
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info mb-0">
                                <i class="bi bi-info-circle me-2"></i>
                                This order has already been @order.Status.ToLower().
                            </div>
                        }
                    </div>
                </div>

                <!-- Stock Impact Card -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-graph-down me-2"></i>Stock Impact
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">If accepted, stock levels will change:</p>
                        @foreach (var item in order.Items)
                        {
                            var stockInfo = stockLevels.FirstOrDefault(s => s.ProductId == item.ProductId);
                            if (stockInfo != null)
                            {
                                <div class="mb-3 p-2 bg-light rounded">
                                    <div class="fw-semibold mb-1">@item.ProductName</div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-muted">Current:</span>
                                        <span class="fw-semibold">@stockInfo.CurrentStock</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-muted">After:</span>
                                        <span class="fw-semibold @(stockInfo.CurrentStock - item.Quantity < stockInfo.MinStockLevel ? "text-warning" : "")">
                                            @(stockInfo.CurrentStock - item.Quantity)
                                        </span>
                                    </div>
                                    @if (stockInfo.CurrentStock - item.Quantity < stockInfo.MinStockLevel)
                                    {
                                        <small class="text-warning">
                                            <i class="bi bi-exclamation-triangle me-1"></i>Below minimum level
                                        </small>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int OrderId { get; set; }

    private ManufacturerOrderDto? order;
    private List<ManufacturerInventoryDto> stockLevels = new();
    private bool loading = true;
    private bool isProcessing = false;
    private string processingAction = "";
    private string statusNotes = "";
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
        await LoadStockLevels();
    }

    private async Task LoadOrder()
    {
        try
        {
            loading = true;
            var response = await ManufacturerService.GetOrderByIdAsync(OrderId);

            if (response.Success && response.Data != null)
            {
                order = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load order";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading order {OrderId}", OrderId);
            errorMessage = "An error occurred while loading the order";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadStockLevels()
    {
        try
        {
            var response = await ManufacturerService.GetInventoryAsync();
            if (response.Success && response.Data != null)
            {
                stockLevels = response.Data;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading stock levels");
        }
    }

    private bool CanAcceptOrder()
    {
        if (order == null) return false;

        foreach (var item in order.Items)
        {
            var stock = stockLevels.FirstOrDefault(s => s.ProductId == item.ProductId);
            if (stock == null || stock.AvailableStock < item.Quantity)
            {
                return false;
            }
        }

        return true;
    }

    private async Task AcceptOrder()
    {
        await UpdateOrderStatus("Accepted");
    }

    private async Task CancelOrder()
    {
        await UpdateOrderStatus("Cancelled");
    }

    private async Task UpdateOrderStatus(string newStatus)
    {
        if (order == null || isProcessing) return;

        try
        {
            isProcessing = true;
            processingAction = newStatus;
            errorMessage = null;
            successMessage = null;

            var updateDto = new CozyComfort.Shared.DTOs.Manufacturer.UpdateOrderStatusDto  // ✅ Fully qualified
            {
                Status = newStatus,
                Notes = statusNotes
            };

            var response = await ManufacturerService.UpdateOrderStatusAsync(order.Id, updateDto);

            if (response.Success)
            {
                successMessage = $"Order has been {newStatus.ToLower()} successfully";
                await LoadOrder(); // Reload to get updated status
                await LoadStockLevels(); // Reload stock if accepted
            }
            else
            {
                errorMessage = response.Message ?? $"Failed to {newStatus.ToLower()} order";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status");
            errorMessage = "An error occurred while updating the order";
        }
        finally
        {
            isProcessing = false;
            processingAction = "";
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Accepted" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}