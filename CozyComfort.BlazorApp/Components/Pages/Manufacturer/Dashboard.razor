@page "/manufacturer/dashboard"
@using CozyComfort.Shared.DTOs.Manufacturer
@using CozyComfort.Shared.DTOs
@using CozyComfort.BlazorApp.Services.Interfaces
@attribute [Authorize(Roles = "Manufacturer,Administrator")]
@inject IManufacturerService ManufacturerService

<PageTitle>Manufacturer Dashboard</PageTitle>

<div class="container mt-4">
    <h2>Manufacturer Dashboard - Cozy Comfort</h2>
    <p class="text-muted">Manage blanket production capacity and stock levels</p>

    <!-- Add New Blanket Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Add New Blanket Model</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@newProduct" OnValidSubmit="@CreateProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>Product Name</label>
                            <InputText @bind-Value="newProduct.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>Category</label>
                            <InputSelect @bind-Value="newProduct.Category" class="form-select">
                                <option value="">Select Category</option>
                                <option value="Luxury">Luxury</option>
                                <option value="Comfort">Comfort</option>
                                <option value="Economy">Economy</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>Base Price</label>
                            <InputNumber @bind-Value="newProduct.Price" class="form-control" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>Initial Stock</label>
                            <InputNumber @bind-Value="newProduct.InitialStock" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>Minimum Stock Level</label>
                            <InputNumber @bind-Value="newProduct.MinStockLevel" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label>&nbsp;</label>
                            <button type="submit" class="btn btn-primary form-control">Add Product</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Current Inventory -->
    <div class="card">
        <div class="card-header">
            <h5>Current Blanket Inventory</h5>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <p>Loading inventory...</p>
            }
            else if (products?.Items?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>SKU</th>
                            <th>Base Price</th>
                            <th>Current Stock</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products.Items)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Category</td>
                                <td>@product.SKU</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>@product.CurrentStock</td>
                                <td>
                                    @if (product.CurrentStock == 0)
                                    {
                                        <span class="text-danger">Out of Stock</span>
                                    }
                                    else if (product.CurrentStock <= product.MinStockLevel)
                                    {
                                        <span class="text-warning">Low Stock</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">In Stock</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products found. Add your first blanket model above.</p>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<ProductDto>? products;
    private CreateProductDto newProduct = new()
    {
        Description = "High-quality blanket",
        Material = "Premium Cotton",
        Size = "Queen",
        MinStockLevel = 10,
        ProductionCapacityPerDay = 50,
        ManufacturingCost = 20,
        LeadTimeDays = 3
    };
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            var response = await ManufacturerService.GetProductsAsync(new PagedRequest { PageSize = 100 });
            if (response.Success)
            {
                products = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateProduct()
    {
        try
        {
            // Generate SKU if not provided
            if (string.IsNullOrEmpty(newProduct.SKU))
            {
                newProduct.SKU = $"BLK-{newProduct.Category?.ToUpper().Substring(0, 3)}-{Random.Shared.Next(1000, 9999)}";
            }

            var response = await ManufacturerService.CreateProductAsync(newProduct);
            if (response.Success)
            {
                // Reset form
                newProduct = new()
                {
                    Description = "High-quality blanket",
                    Material = "Premium Cotton",
                    Size = "Queen",
                    MinStockLevel = 10,
                    ProductionCapacityPerDay = 50,
                    ManufacturingCost = 20,
                    LeadTimeDays = 3
                };

                // Reload products
                await LoadProducts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating product: {ex.Message}");
        }
    }
}