@page "/manufacturer/products/{ProductId:int}/stock"
@attribute [Authorize(Roles = "Manufacturer")]
@inject IManufacturerService ManufacturerService
@inject NavigationManager Navigation
@inject ILogger<StockManagement> Logger

<PageTitle>Stock Management - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item"><a href="/manufacturer/dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/manufacturer/products/@ProductId" class="text-decoration-none">Product Details</a></li>
            <li class="breadcrumb-item active text-muted" aria-current="page">Stock Management</li>
        </ol>
    </nav>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading stock information...</p>
        </div>
    }
    else if (product != null)
    {
        <!-- Clean Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">Stock Management</h2>
                <p class="text-muted mb-0">@product.Name - Check availability and manage stock levels</p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{ProductId}"))">
                <i class="bi bi-arrow-left me-1"></i> Back to Product
            </button>
        </div>

        <div class="row">
            <!-- Main Content -->
            <div class="col-md-8">
                <!-- Current Stock Status Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>Current Stock Status
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4 mb-4">
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-boxes display-4 mb-3 @(product.CurrentStock <= product.MinStockLevel ? "text-danger" : "text-success")"></i>
                                    <div class="text-muted mb-1">Current Stock</div>
                                    <div class="h3 @(product.CurrentStock <= product.MinStockLevel ? "text-danger" : "text-success")">
                                        @product.CurrentStock
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-check-circle display-4 mb-3 text-primary"></i>
                                    <div class="text-muted mb-1">Available Stock</div>
                                    <div class="h3 text-primary">@product.AvailableStock</div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center p-4 rounded border">
                                    <i class="bi bi-clock display-4 mb-3 text-warning"></i>
                                    <div class="text-muted mb-1">Reserved Stock</div>
                                    <div class="h3 text-warning">@(product.CurrentStock - product.AvailableStock)</div>
                                </div>
                            </div>
                        </div>

                        @if (product.CurrentStock <= product.MinStockLevel)
                        {
                            <div class="alert alert-warning d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <div>
                                    <strong>Low Stock Alert:</strong> Current stock is below minimum threshold (@product.MinStockLevel units).
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Stock Availability Check Card -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-search me-2"></i>Stock Availability Check
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(stockCheckMessage))
                        {
                            <div class="alert @(isStockAvailable ? "alert-success" : "alert-warning") alert-dismissible fade show" role="alert">
                                <i class="bi bi-@(isStockAvailable ? "check-circle" : "exclamation-triangle") me-2"></i>
                                @stockCheckMessage
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        <EditForm Model="stockCheckRequest" OnValidSubmit="HandleStockCheck">
                            <div class="row g-3">
                                <div class="col-md-8">
                                    <label for="quantity" class="form-label fw-semibold">Quantity to Check</label>
                                    <InputNumber id="quantity" class="form-control" @bind-Value="stockCheckRequest.QuantityRequested"
                                                 placeholder="Enter quantity..." />
                                    <div class="form-text">Enter the number of units you want to check availability for</div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label fw-semibold">&nbsp;</label>
                                    <button type="submit" class="btn btn-primary w-100" disabled="@isChecking">
                                        @if (isChecking)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <text>Checking...</text>
                                        }
                                        else
                                        {
                                            <i class="bi bi-search me-2"></i>
                                            <text>Check Availability</text>
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>

                        @if (stockCheckResponse != null)
                        {
                            <hr class="my-4" />
                            <h6 class="fw-semibold mb-3">
                                <i class="bi bi-clipboard-data me-2"></i>Stock Check Result
                            </h6>
                            <div class="bg-light p-4 rounded">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                            <span class="text-muted">Requested Quantity:</span>
                                            <span class="fw-semibold">@stockCheckResponse.QuantityRequested units</span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                            <span class="text-muted">Available Stock:</span>
                                            <span class="fw-semibold text-primary">@stockCheckResponse.AvailableStock units</span>
                                        </div>
                                    </div>
                                </div>

                                @if (stockCheckResponse.EstimatedProductionDays.HasValue)
                                {
                                    <div class="row g-3 mt-2">
                                        <div class="col-md-6">
                                            <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                                <span class="text-muted">Production Time:</span>
                                                <span class="fw-semibold">@stockCheckResponse.EstimatedProductionDays days</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                                <span class="text-muted">Estimated Availability:</span>
                                                <span class="fw-semibold text-success">
                                                    @stockCheckResponse.EstimatedAvailabilityDate?.ToString("MMM dd, yyyy")
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <!-- Product Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>Product Information
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">Product Name:</span>
                                    <span class="fw-semibold">@product.Name</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">SKU:</span>
                                    <span class="fw-semibold">@product.SKU</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">Category:</span>
                                    <span class="fw-semibold">@product.Category</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <span class="text-muted">Min Stock Level:</span>
                                    <span class="fw-semibold text-warning">@product.MinStockLevel</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center py-2">
                                    <span class="text-muted">Status:</span>
                                    @if (product.CurrentStock <= product.MinStockLevel)
                                    {
                                        <span class="badge bg-danger">Low Stock</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">In Stock</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions Card -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-lightning me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{ProductId}"))">
                                <i class="bi bi-eye me-2"></i> View Product Details
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo($"/manufacturer/products/{ProductId}/edit"))">
                                <i class="bi bi-pencil me-2"></i> Edit Product
                            </button>
                            <hr class="my-2" />
                            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/inventory"))">
                                <i class="bi bi-boxes me-2"></i> Back to Inventory
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/dashboard"))">
                                <i class="bi bi-house me-2"></i> Back to Dashboard
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="bi bi-exclamation-circle me-2"></i>
            <div>@errorMessage</div>
        </div>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/manufacturer/dashboard"))">
            <i class="bi bi-arrow-left me-1"></i> Back to Dashboard
        </button>
    }
</div>

@code {
    [Parameter] public int ProductId { get; set; }

    private ProductDto? product;
    private StockCheckRequest stockCheckRequest = new();
    private StockCheckResponse? stockCheckResponse;
    private bool isLoading = true;
    private bool isChecking = false;
    private string? errorMessage;
    private string? stockCheckMessage;
    private bool isStockAvailable;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        stockCheckRequest.ProductId = ProductId;
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await ManufacturerService.GetProductByIdAsync(ProductId);

            if (response.Success && response.Data != null)
            {
                product = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load product";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {ProductId}", ProductId);
            errorMessage = "An error occurred while loading product";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleStockCheck()
    {
        try
        {
            isChecking = true;
            stockCheckMessage = null;

            var response = await ManufacturerService.CheckStockAsync(stockCheckRequest);

            if (response.Success && response.Data != null)
            {
                stockCheckResponse = response.Data;
                isStockAvailable = response.Data.IsAvailable;
                stockCheckMessage = response.Data.Message;
            }
            else
            {
                stockCheckMessage = response.Message ?? "Failed to check stock";
                isStockAvailable = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking stock for product {ProductId}", ProductId);
            stockCheckMessage = "An error occurred while checking stock";
            isStockAvailable = false;
        }
        finally
        {
            isChecking = false;
        }
    }
}