@page "/seller/orders"
@using CozyComfort.Shared.DTOs
@using CozyComfort.Shared.DTOs.Seller
@using CozyComfort.BlazorApp.Services.Interfaces
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Orders - Seller</PageTitle>

<h3>Order Management</h3>

<!-- Tab Navigation -->
<ul class="nav nav-tabs mb-4">
    <li class="nav-item">
        <button class="nav-link @(activeTab == "customer" ? "active" : "")"
                @onclick='() => ChangeTab("customer")'>
            Customer Orders
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(activeTab == "distributor" ? "active" : "")"
                @onclick='() => ChangeTab("distributor")'>
            Distributor Orders
        </button>
    </li>
</ul>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @if (activeTab == "customer")
    {
        <!-- Customer Orders Section -->
        <div class="card">
            <div class="card-header">
                <h5>Customer Orders</h5>
            </div>
            <div class="card-body">
                @if (customerOrders == null || !customerOrders.Any())
                {
                    <p>No customer orders found.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Order #</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in customerOrders)
                                {
                                    <tr>
                                        <td>@order.OrderNumber</td>
                                        <td>@order.CustomerName</td>
                                        <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(order.Status)">
                                                @order.Status
                                            </span>
                                        </td>
                                        <td>$@order.TotalAmount.ToString("F2")</td>
                                        <td>
                                            <button class="btn btn-sm btn-info"
                                                    @onclick="() => ViewCustomerOrder(order.Id)">
                                                <i class="bi bi-eye"></i> View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Distributor Orders Section -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Distributor Orders</h5>
                <button class="btn btn-primary" @onclick="ShowCreateDistributorOrder">
                    <i class="bi bi-plus"></i> New Order
                </button>
            </div>
            <div class="card-body">
                @if (distributorOrders == null || !distributorOrders.Any())
                {
                    <p>No distributor orders found.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Order #</th>
                                    <th>Distributor Order #</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Expected Delivery</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in distributorOrders)
                                {
                                    <tr>
                                        <td>@order.OrderNumber</td>
                                        <td>@(order.DistributorOrderNumber ?? "Pending")</td>
                                        <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(order.Status)">
                                                @order.Status
                                            </span>
                                        </td>
                                        <td>$@order.TotalAmount.ToString("F2")</td>
                                        <td>
                                            @if (order.ExpectedDeliveryDate.HasValue)
                                            {
                                                @order.ExpectedDeliveryDate.Value.ToString("MM/dd/yyyy")
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-info"
                                                    @onclick="() => ViewDistributorOrder(order.Id)">
                                                <i class="bi bi-eye"></i> View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
}

<!-- Create Distributor Order Modal -->
@if (showCreateOrderModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Distributor Order</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateOrderModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Shipping Address</label>
                            <textarea class="form-control" @bind="newOrder.ShippingAddress" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" @bind="newOrder.Notes" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <h6>Products</h6>
                            @if (availableProducts != null)
                            {
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Price</th>
                                            <th>Stock</th>
                                            <th>Quantity</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in availableProducts)
                                        {
                                            <tr>
                                                <td>@product.ProductName</td>
                                                <td>$@product.PurchasePrice.ToString("F2")</td>
                                                <td>@product.CurrentStock</td>
                                                <td>
                                                    <input type="number" class="form-control" style="width: 100px"
                                                           min="0" max="@product.CurrentStock"
                                                           @bind="orderQuantities[product.Id]" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateOrderModal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="CreateDistributorOrder">
                        Create Order
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string activeTab = "customer";
    private bool loading = true;
    private List<CustomerOrderDto>? customerOrders;
    private List<SellerDistributorOrderDto>? distributorOrders;
    private bool showCreateOrderModal = false;

    private CreateSellerDistributorOrderDto newOrder = new();
    private List<SellerProductDto>? availableProducts;
    private Dictionary<int, int> orderQuantities = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        loading = true;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (!string.IsNullOrEmpty(userEmail))
            {
                // Load customer orders
                var customerResult = await SellerService.GetCustomerOrdersAsync(userEmail);
                if (customerResult.Success)
                {
                    customerOrders = customerResult.Data;
                }

                // Load distributor orders
                var distributorResult = await SellerService.GetDistributorOrdersAsync();
                if (distributorResult.Success)
                {
                    distributorOrders = distributorResult.Data;
                }
            }
        }
        finally
        {
            loading = false;
        }
    }

    private void ChangeTab(string tab)
    {
        activeTab = tab;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-warning",
            "processing" => "bg-info",
            "confirmed" => "bg-primary",
            "shipped" => "bg-secondary",
            "delivered" => "bg-success",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void ViewCustomerOrder(int orderId)
    {
        Navigation.NavigateTo($"/seller/orders/customer/{orderId}");
    }

    private void ViewDistributorOrder(int orderId)
    {
        Navigation.NavigateTo($"/seller/orders/distributor/{orderId}");
    }

    private async Task ShowCreateDistributorOrder()
    {
        // Load available products
        var productsResult = await SellerService.GetProductsAsync(new PagedRequest { PageSize = 100 });
        if (productsResult.Success)
        {
            availableProducts = productsResult.Data?.Items;
            orderQuantities.Clear();
            if (availableProducts != null)
            {
                foreach (var product in availableProducts)
                {
                    orderQuantities[product.Id] = 0;
                }
            }
        }

        newOrder = new CreateSellerDistributorOrderDto();
        showCreateOrderModal = true;
    }

    private void CloseCreateOrderModal()
    {
        showCreateOrderModal = false;
    }

    private async Task CreateDistributorOrder()
    {
        // Build order items from quantities
        newOrder.Items = orderQuantities
            .Where(q => q.Value > 0)
            .Select(q => new DistributorOrderItemRequest
            {
                ProductId = q.Key,
                Quantity = q.Value
            })
            .ToList();

        if (!newOrder.Items.Any())
        {
            // Show error - no items selected
            return;
        }

        var result = await SellerService.CreateDistributorOrderAsync(newOrder);
        if (result.Success)
        {
            showCreateOrderModal = false;
            await LoadOrders();
        }
    }
}