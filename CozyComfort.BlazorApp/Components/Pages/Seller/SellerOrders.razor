@page "/seller/orders"
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject NavigationManager Navigation

<PageTitle>Orders Management - Seller</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Orders Management</h2>
            <p class="text-muted mb-0">Manage customer and distributor orders</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="CreateDistributorOrder">
                <i class="bi bi-plus-circle"></i> New Distributor Order
            </button>
            <button class="btn btn-outline-secondary" @onclick="RefreshOrders">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading orders...</span>
            </div>
        </div>
    }
    else if (combinedOrders != null)
    {
        <!-- Simple Tabs -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex gap-2 flex-wrap">
                    <button style="background-color: #6c757d; color: white; border: 1px solid #6c757d; padding: 8px 16px; border-radius: 4px; font-size: 14px;"
                            @onclick="@(() => activeTab = "customer")">
                        Customer Orders
                        <span style="background-color: white; color: #6c757d; padding: 2px 6px; border-radius: 12px; margin-left: 8px; font-size: 12px;">@combinedOrders.TotalCustomerOrders</span>
                    </button>

                    <button style="background-color: #6c757d; color: white; border: 1px solid #6c757d; padding: 8px 16px; border-radius: 4px; font-size: 14px;"
                            @onclick="@(() => activeTab = "distributor")">
                        Distributor Orders
                        <span style="background-color: white; color: #6c757d; padding: 2px 6px; border-radius: 12px; margin-left: 8px; font-size: 12px;">@combinedOrders.TotalDistributorOrders</span>
                    </button>
                </div>
            </div>

            <div class="card-body p-0">
                @if (activeTab == "customer")
                {
                    <!-- Customer Orders Table -->
                    @if (combinedOrders.CustomerOrders.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Order #</th>
                                        <th>Customer</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Items</th>
                                        <th>Amount</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in combinedOrders.CustomerOrders)
                                    {
                                        <tr>
                                            <td class="fw-semibold">@order.OrderNumber</td>
                                            <td>@order.CustomerName</td>
                                            <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(order.Status) fs-6">
                                                    @order.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@order.ItemCount items</span>
                                            </td>
                                            <td class="fw-semibold">$@order.TotalAmount.ToString("N2")</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-outline-primary"
                                                        @onclick="@(() => ViewOrderDetails(order.Id, "customer"))">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="bi bi-inbox display-1"></i>
                            <h5 class="mt-3">No Customer Orders</h5>
                            <p>Customer orders will appear here when placed.</p>
                        </div>
                    }
                }
                else
                {
                    <!-- Distributor Orders Table -->
                    @if (combinedOrders.DistributorOrders.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Order #</th>
                                        <th>Distributor Order #</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Items</th>
                                        <th>Amount</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in combinedOrders.DistributorOrders)
                                    {
                                        <tr>
                                            <td class="fw-semibold">@order.OrderNumber</td>
                                            <td class="text-muted">@order.DistributorOrderNumber</td>
                                            <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(order.Status) fs-6">
                                                    @order.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@order.ItemCount items</span>
                                            </td>
                                            <td class="fw-semibold">$@order.TotalAmount.ToString("N2")</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-outline-primary"
                                                        @onclick="@(() => ViewOrderDetails(order.Id, "distributor"))">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="bi bi-truck display-1"></i>
                            <h5 class="mt-3">No Distributor Orders</h5>
                            <p>Orders placed with distributors will appear here.</p>
                            <button class="btn btn-primary" @onclick="CreateDistributorOrder">
                                <i class="bi bi-plus-circle"></i> Create First Order
                            </button>
                        </div>
                    }
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> Unable to load orders. Please try refreshing the page.
        </div>
    }
</div>

@code {
    private CombinedOrdersDto? combinedOrders;
    private bool isLoading = true;
    private string activeTab = "customer";

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            isLoading = true;
            var response = await SellerService.GetCombinedOrdersAsync(new PagedRequest { PageNumber = 1, PageSize = 100 });

            if (response.Success)
            {
                combinedOrders = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateDistributorOrder()
    {
        Navigation.NavigateTo("/seller/orders/create-distributor-order");
    }

    private void ViewOrderDetails(int orderId, string orderType)
    {
        Navigation.NavigateTo($"/seller/orders/{orderId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-warning text-dark",
            "accepted" => "bg-success",
            "cancelled" => "bg-danger",
            "completed" => "bg-primary",
            "shipped" => "bg-info",
            "delivered" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }
}