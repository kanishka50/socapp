@page "/seller/orders/create-distributor-order"
@using CozyComfort.Shared.DTOs.Seller
@attribute [Authorize(Roles = "Seller")]
@inject ISellerService SellerService
@inject NavigationManager Navigation
@inject ILogger<CreateDistributorOrder> Logger

<PageTitle>Create Distributor Order - Seller</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Create Order from Distributor</h2>
            <p class="text-muted mb-0">Select products from distributor catalog and place order</p>
        </div>
        <button class="btn btn-outline-secondary" @onclick="CancelOrder">
            <i class="bi bi-arrow-left"></i> Back to Orders
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-circle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle"></i> @successMessage
            <button type="button" class="btn-close" @onclick="ClearSuccessMessage"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-8">
            <!-- Product Selection -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-box-seam me-2"></i>Select Distributor Products
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="LoadDistributorProducts" disabled="@loadingProducts">
                            @if (loadingProducts)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleProductList">
                            <i class="bi bi-@(showProductList ? "eye-slash" : "eye")"></i>
                            @(showProductList ? "Hide" : "Show") Products
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Search -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search distributor products..."
                                       @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearchKeyUp" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-primary w-100" @onclick="LoadDistributorProducts" disabled="@loadingProducts">
                                <i class="bi bi-search"></i> Search
                            </button>
                        </div>
                    </div>

                    @if (showProductList)
                    {
                        @if (loadingProducts)
                        {
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary"></div>
                                <p class="mt-3 mb-0">Loading distributor products...</p>
                            </div>
                        }
                        else if (distributorProducts == null || !distributorProducts.Items.Any())
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle"></i> No distributor products found.
                                <button class="btn btn-sm btn-outline-primary ms-2" @onclick="LoadDistributorProducts">
                                    Try Again
                                </button>
                            </div>
                        }
                        else
                        {
                            <!-- Products Table -->
                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                <table class="table table-hover table-sm">
                                    <thead class="table-light sticky-top">
                                        <tr>
                                            <th>Product Name</th>
                                            <th>SKU</th>
                                            <th>Purchase Price</th>
                                            <th>Available Stock</th>
                                            <th>Quantity</th>
                                            <th class="text-center">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in distributorProducts.Items)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="fw-semibold">@product.ProductName</div>
                                                    <small class="text-muted">@product.SKU</small>
                                                </td>
                                                <td class="text-muted">@product.SKU</td>
                                                <td>
                                                    @* FIXED: Show SellingPrice (what seller pays) instead of PurchasePrice *@
                                                    <span class="badge bg-primary">$@product.SellingPrice.ToString("F2")</span>
                                                </td>
                                                <td>
                                                    @if (product.AvailableStock > 0)
                                                    {
                                                        <span class="badge bg-success">@product.AvailableStock</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Out of Stock</span>
                                                    }
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm" style="width: 80px;"
                                                           min="1" max="@product.AvailableStock" value="1"
                                                           @onchange="@((ChangeEventArgs e) => SetTempQuantity(product.Id, e))" />
                                                </td>
                                                <td class="text-center">
                                                    <button class="btn btn-sm btn-primary"
                                                            @onclick="() => AddDistributorProductToOrder(product)"
                                                            disabled="@(product.AvailableStock <= 0)">
                                                        <i class="bi bi-plus"></i> Add
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (distributorProducts.TotalPages > 1)
                            {
                                <nav class="mt-3">
                                    <ul class="pagination pagination-sm justify-content-center">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                                <i class="bi bi-chevron-left"></i>
                                            </button>
                                        </li>

                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(distributorProducts.TotalPages, currentPage + 2); i++)
                                        {
                                            var pageNumber = i;
                                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                            </li>
                                        }

                                        <li class="page-item @(currentPage == distributorProducts.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                                <i class="bi bi-chevron-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        }
                    }

                    <!-- Order Items -->
                    <hr class="my-4">

                    @if (orderItems.Any())
                    {
                        <h6 class="mb-3">
                            <i class="bi bi-cart me-2"></i>Order Items
                            <span class="badge bg-secondary">@orderItems.Count items</span>
                        </h6>
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Total</th>
                                        <th class="text-center">Remove</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in orderItems)
                                    {
                                        <tr>
                                            <td>
                                                <div class="fw-semibold">@item.ProductName</div>
                                                <small class="text-muted">@item.SKU</small>
                                            </td>
                                            <td>
                                                <input type="number" class="form-control form-control-sm" style="width: 80px;"
                                                       @bind="item.Quantity" @bind:event="oninput" @onchange="UpdateOrderTotal" min="1" />
                                            </td>
                                            <td>$@item.RequestedPrice.ToString("F2")</td>
                                            <td class="fw-semibold">$@item.Total.ToString("F2")</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveItem(item)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-info">
                                    <tr>
                                        <th colspan="3" class="text-end">Order Total:</th>
                                        <th class="fw-bold fs-5">$@orderTotal.ToString("F2")</th>
                                        <th></th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="bi bi-cart3 display-2"></i>
                            <h6 class="mt-2">No Items Added</h6>
                            <p class="mb-0">Select products from the distributor catalog above to add to your order.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Order Details -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-clipboard me-2"></i>Order Details
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="shippingAddress" class="form-label">
                                    Shipping Address <span class="text-danger">*</span>
                                </label>
                                <input id="shippingAddress" type="text" class="form-control" @bind="shippingAddress"
                                       placeholder="Enter your shipping address" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="notes" class="form-label">Order Notes (Optional)</label>
                                <textarea id="notes" class="form-control" rows="3" @bind="orderNotes"
                                          placeholder="Add any special instructions..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Order Summary -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-receipt me-2"></i>Order Summary
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-6">
                            <small class="text-muted">Items</small>
                            <div class="fw-semibold">@orderItems.Count</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Total Quantity</small>
                            <div class="fw-semibold">@orderItems.Sum(i => i.Quantity)</div>
                        </div>
                    </div>

                    <hr>

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="fw-semibold">Order Total:</span>
                        <span class="h4 text-success mb-0">$@orderTotal.ToString("F2")</span>
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-lg" @onclick="CreateOrder"
                                disabled="@(!orderItems.Any() || isCreatingOrder || string.IsNullOrWhiteSpace(shippingAddress))">
                            @if (isCreatingOrder)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Creating Order...</text>
                            }
                            else
                            {
                                <i class="bi bi-check-circle me-2"></i>
                                <text>Create Order</text>
                            }
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="CancelOrder" disabled="@isCreatingOrder">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>

                    @if (!orderItems.Any())
                    {
                        <small class="text-muted d-block mt-2">Add products to enable order creation</small>
                    }
                    else if (string.IsNullOrWhiteSpace(shippingAddress))
                    {
                        <small class="text-warning d-block mt-2">
                            <i class="bi bi-exclamation-circle"></i> Please enter shipping address
                        </small>
                    }
                </div>
            </div>

            <!-- Product Stats -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="bi bi-info-circle me-2"></i>Available Products
                    </h6>
                </div>
                <div class="card-body">
                    @if (distributorProducts != null)
                    {
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="fw-semibold text-primary">@distributorProducts.TotalCount</div>
                                <small class="text-muted">Total Products</small>
                            </div>
                            <div class="col-6">
                                <div class="fw-semibold text-info">@currentPage / @distributorProducts.TotalPages</div>
                                <small class="text-muted">Current Page</small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted mb-0">Loading product information...</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Form data
    private string shippingAddress = "";
    private string orderNotes = "";

    // Page data
    private PagedResult<DistributorProductDto>? distributorProducts;
    private List<OrderItemViewModel> orderItems = new();
    private Dictionary<int, int> tempQuantities = new();

    // Search and pagination
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private bool showProductList = true;
    private bool loadingProducts = false;

    // Order summary
    private decimal orderTotal = 0;
    private bool isCreatingOrder = false;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDistributorProducts();
    }

    private async Task HandleSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadDistributorProducts();
        }
    }

    private async Task LoadDistributorProducts()
    {
        try
        {
            loadingProducts = true;
            errorMessage = null;

            var request = new PagedRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm
            };

            var response = await SellerService.GetDistributorProductsAsync(request);

            if (response.Success && response.Data != null)
            {
                distributorProducts = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load distributor products";
                distributorProducts = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading distributor products");
            errorMessage = "Failed to load distributor products. Please try again.";
        }
        finally
        {
            loadingProducts = false;
        }
    }

    private void ToggleProductList()
    {
        showProductList = !showProductList;
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= (distributorProducts?.TotalPages ?? 1) && page != currentPage)
        {
            currentPage = page;
            await LoadDistributorProducts();
        }
    }

    private void SetTempQuantity(int productId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int quantity) && quantity > 0)
        {
            tempQuantities[productId] = quantity;
        }
        else
        {
            tempQuantities[productId] = 1;
        }
    }

    private void AddDistributorProductToOrder(DistributorProductDto product)
    {
        try
        {
            int quantity = tempQuantities.ContainsKey(product.Id) ? tempQuantities[product.Id] : 1;

            if (quantity <= 0 || quantity > product.AvailableStock)
            {
                errorMessage = $"Invalid quantity for {product.ProductName}. Available stock: {product.AvailableStock}";
                return;
            }

            var existingItem = orderItems.FirstOrDefault(i => i.DistributorProductId == product.Id);
            if (existingItem != null)
            {
                existingItem.Quantity += quantity;
            }
            else
            {
                orderItems.Add(new OrderItemViewModel
                {
                    DistributorProductId = product.Id,
                    ProductName = product.ProductName,
                    SKU = product.SKU,
                    Quantity = quantity,
                    RequestedPrice = product.SellingPrice  // FIXED: Use SellingPrice (what seller pays)
                });
            }

            UpdateOrderTotal();
            successMessage = $"Added {quantity} x {product.ProductName} to order";

            // Clear the success message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(t =>
            {
                successMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding product to order");
            errorMessage = "Failed to add product to order";
        }
    }

    private void RemoveItem(OrderItemViewModel item)
    {
        orderItems.Remove(item);
        UpdateOrderTotal();
        successMessage = $"Removed {item.ProductName} from order";

        // Clear the success message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(t =>
        {
            successMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }

    private void UpdateOrderTotal()
    {
        orderTotal = orderItems.Sum(i => i.Total);
    }

    private async Task CreateOrder()
    {
        try
        {
            if (!orderItems.Any())
            {
                errorMessage = "Please add at least one item to the order";
                return;
            }

            if (string.IsNullOrWhiteSpace(shippingAddress))
            {
                errorMessage = "Please enter a shipping address";
                return;
            }

            isCreatingOrder = true;
            errorMessage = null;
            successMessage = null;

            var createOrderDto = new CreateSellerDistributorOrderDto
            {
                ShippingAddress = shippingAddress,
                Notes = orderNotes,
                Items = orderItems.Select(i => new CreateSellerDistributorOrderItemDto
                {
                    DistributorProductId = i.DistributorProductId,
                    Quantity = i.Quantity
                }).ToList()
            };

            var response = await SellerService.CreateDistributorOrderAsync(createOrderDto);

            if (response.Success)
            {
                successMessage = "Order created successfully! Redirecting...";
                await Task.Delay(1500);
                Navigation.NavigateTo("/seller/orders");
            }
            else
            {
                errorMessage = response.Message ?? "Failed to create order. Please try again.";
                Logger.LogError("Order creation failed: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating order");
            errorMessage = "An unexpected error occurred while creating the order. Please try again.";
        }
        finally
        {
            isCreatingOrder = false;
        }
    }

    private void CancelOrder()
    {
        Navigation.NavigateTo("/seller/orders");
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    private void ClearSuccessMessage()
    {
        successMessage = null;
    }

    private class OrderItemViewModel
    {
        public int DistributorProductId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string SKU { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal RequestedPrice { get; set; }
        public decimal Total => Quantity * RequestedPrice;
    }
}