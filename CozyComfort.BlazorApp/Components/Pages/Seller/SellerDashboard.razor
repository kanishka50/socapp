@page "/seller/dashboard"
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject NavigationManager Navigation
@inject ILogger<SellerDashboard> Logger

<PageTitle>Seller Dashboard - Cozy Comfort</PageTitle>

<div class="container-fluid p-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Seller Dashboard</h2>
            <p class="text-muted mb-0">Manage your sales and inventory</p>
        </div>
        <div class="text-muted">
            <i class="bi bi-calendar3"></i> @DateTime.Now.ToString("MMMM dd, yyyy")
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading dashboard...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-circle"></i> @errorMessage
        </div>
    }
    else
    {
        <!-- Key Metrics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Total Orders</h6>
                                <h3 class="mb-0">@totalOrders</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-clipboard-check fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card text-white bg-success h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Pending Orders</h6>
                                <h3 class="mb-0">@pendingOrders</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-hourglass-split fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card text-white bg-info h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Total Products</h6>
                                <h3 class="mb-0">@totalProducts</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-boxes fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card text-white bg-warning h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title mb-2">Today's Revenue</h6>
                                <h3 class="mb-0">$@todayRevenue.ToString("N2")</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-currency-dollar fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Orders Section -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-clock-history me-2"></i>Recent Orders
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshDashboard">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="NavigateToOrders">
                        <i class="bi bi-eye"></i> View All Orders
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (recentOrders?.Any() == true)
                {
                    <div class="row">
                        <!-- Recent Orders Table -->
                        <div class="col-md-8">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Order #</th>
                                            <th>Customer</th>
                                            <th>Date</th>
                                            <th>Status</th>
                                            <th>Amount</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var order in recentOrders.Take(5))
                                        {
                                            <tr>
                                                <td class="fw-semibold">@order.OrderNumber</td>
                                                <td>@order.CustomerName</td>
                                                <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(order.Status)">
                                                        @order.Status
                                                    </span>
                                                </td>
                                                <td class="fw-semibold">$@order.TotalAmount.ToString("F2")</td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick="() => ViewOrderDetails(order.Id)">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Order Status Summary Sidebar -->
                        <div class="col-md-4">
                            <!-- Order Status Summary -->
                            @* <div class="card mb-3 bg-light">
                                <div class="card-header bg-transparent">
                                    <h6 class="mb-0 fw-semibold">
                                        <i class="bi bi-pie-chart me-2"></i>Order Status Summary
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="text-muted">Pending</span>
                                            <span class="badge bg-warning fs-6">@pendingOrders</span>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="text-muted">Processing</span>
                                            <span class="badge bg-info fs-6">@processingOrders</span>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="text-muted">Shipped</span>
                                            <span class="badge bg-primary fs-6">@shippedOrders</span>
                                        </div>
                                    </div>
                                    <div class="mb-0">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="text-muted">Delivered</span>
                                            <span class="badge bg-success fs-6">@deliveredOrders</span>
                                        </div>
                                    </div>
                                </div>
                            </div> *@

                            <!-- Today's Highlights -->
                            <div class="card bg-light">
                                <div class="card-header bg-transparent">
                                    <h6 class="mb-0 fw-semibold">
                                        <i class="bi bi-star me-2"></i>Today's Highlights
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <small class="text-muted d-block">New Orders Today</small>
                                        <h5 class="text-primary mb-0">@todayOrders</h5>
                                    </div>
                                    <div class="mb-3">
                                        <small class="text-muted d-block">Revenue Today</small>
                                        <h5 class="text-success mb-0">$@todayRevenue.ToString("N2")</h5>
                                    </div>
                                    <div class="mb-0">
                                        <small class="text-muted d-block">Average Order Value</small>
                                        <h5 class="text-info mb-0">$@averageOrderValue.ToString("N2")</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5 text-muted">
                        <i class="bi bi-inbox display-1"></i>
                        <h5 class="mt-3">No Recent Orders</h5>
                        <p>Orders will appear here once customers start placing them.</p>
                        <button class="btn btn-primary" @onclick="NavigateToOrders">
                            <i class="bi bi-plus-circle"></i> View Orders
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;

    // Dashboard metrics
    private int totalOrders = 0;
    private int pendingOrders = 0;
    private int processingOrders = 0;
    private int shippedOrders = 0;
    private int deliveredOrders = 0;
    private int totalProducts = 0;
    private int todayOrders = 0;
    private decimal todayRevenue = 0;
    private decimal averageOrderValue = 0;

    private List<CustomerOrderDto>? recentOrders;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Load combined orders for metrics - THIS IS THE KEY CHANGE
            var combinedOrdersResponse = await SellerService.GetCombinedOrdersAsync(new PagedRequest
            {
                PageNumber = 1,
                PageSize = 1000 // Get more records for accurate metrics
            });

            if (combinedOrdersResponse.Success && combinedOrdersResponse.Data != null)
            {
                var combinedOrders = combinedOrdersResponse.Data;

                // Combine both customer and distributor orders for metrics
                var allCustomerOrders = combinedOrders.CustomerOrders.ToList();
                var allDistributorOrders = combinedOrders.DistributorOrders.ToList();

                // Calculate total orders (customer + distributor)
                totalOrders = allCustomerOrders.Count + allDistributorOrders.Count;

                // Calculate pending orders from both types
                pendingOrders = allCustomerOrders.Count(o => o.Status.ToLower() == "pending") +
                               allDistributorOrders.Count(o => o.Status.ToLower() == "pending");

                // Calculate other status counts from both types
                processingOrders = allCustomerOrders.Count(o => o.Status.ToLower() == "processing") +
                                  allDistributorOrders.Count(o => o.Status.ToLower() == "processing");

                shippedOrders = allCustomerOrders.Count(o => o.Status.ToLower() == "shipped") +
                               allDistributorOrders.Count(o => o.Status.ToLower() == "shipped");

                deliveredOrders = allCustomerOrders.Count(o => o.Status.ToLower() == "delivered") +
                                 allDistributorOrders.Count(o => o.Status.ToLower() == "delivered");

                // Use customer orders for recent orders display (more relevant for dashboard)
                recentOrders = allCustomerOrders.OrderByDescending(o => o.OrderDate).ToList();

                // Calculate today's metrics from both order types
                var today = DateTime.Today;
                var todayCustomerOrders = allCustomerOrders.Where(o => o.OrderDate.Date == today).ToList();
                var todayDistributorOrders = allDistributorOrders.Where(o => o.OrderDate.Date == today).ToList();

                todayOrders = todayCustomerOrders.Count + todayDistributorOrders.Count;
                todayRevenue = todayCustomerOrders.Sum(o => o.TotalAmount) +
                              todayDistributorOrders.Sum(o => o.TotalAmount);

                // Calculate average order value from all orders
                var allOrderAmounts = allCustomerOrders.Select(o => o.TotalAmount)
                                     .Concat(allDistributorOrders.Select(o => o.TotalAmount))
                                     .ToList();

                if (allOrderAmounts.Any())
                {
                    averageOrderValue = allOrderAmounts.Average();
                }
            }
            else
            {
                errorMessage = combinedOrdersResponse.Message ?? "Failed to load orders data";
            }

            // Load products for metrics
            var productsResponse = await SellerService.GetProductsAsync(new PagedRequest
            {
                PageNumber = 1,
                PageSize = 1000
            });

            if (productsResponse.Success && productsResponse.Data != null)
            {
                totalProducts = productsResponse.Data.TotalCount;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            errorMessage = "Failed to load dashboard data. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/seller/orders");
    }

    private void NavigateToInventory()
    {
        Navigation.NavigateTo("/seller/inventory");
    }

    private void NavigateToShop()
    {
        Navigation.NavigateTo("/shop");
    }

    private void ViewOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/seller/orders/{orderId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-warning text-dark",
            "processing" => "bg-info",
            "confirmed" => "bg-primary",
            "shipped" => "bg-secondary",
            "delivered" => "bg-success",
            "cancelled" => "bg-danger",
            "accepted" => "bg-success",
            "completed" => "bg-primary",
            _ => "bg-secondary"
        };
    }
}