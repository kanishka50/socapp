@page "/seller/dashboard"
@using CozyComfort.Shared.DTOs.Seller
@using CozyComfort.Shared.DTOs.Distributor
@using CozyComfort.Shared.DTOs
@using CozyComfort.BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject IDistributorService DistributorService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Seller Dashboard</PageTitle>

<div class="container mt-4">
    <h2>Seller Dashboard</h2>
    <p class="text-muted">Display blankets for sale and request fulfillment from distributors</p>

    <!-- Check Distributor Stock -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Check Distributor Stock</h5>
        </div>
        <div class="card-body">
            @if (isLoadingDistributorProducts)
            {
                <p>Checking distributor inventory...</p>
            }
            else if (distributorProducts?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>SKU</th>
                            <th>Distributor Price</th>
                            <th>Available Stock</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in distributorProducts.Where(p => p.CurrentStock > 0))
                        {
                            <tr>
                                <td>@product.ProductName</td>
                                <td>@product.SKU</td>
                                <td>$@product.SellingPrice.ToString("F2")</td>
                                <td>@product.CurrentStock units</td>
                                <td>
                                    @if (addedProductIds.Contains(product.Id))
                                    {
                                        <span class="badge bg-success">In Shop</span>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary"
                                                @onclick="() => AddToShop(product)">
                                            Add to Shop
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products available from distributor.</p>
            }
        </div>
    </div>

    <!-- Shop Inventory (Products for Sale) -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Products for Sale</h5>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <p>Loading shop inventory...</p>
            }
            else if (shopProducts?.Items?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>SKU</th>
                            <th>Cost</th>
                            <th>Retail Price</th>
                            <th>Current Stock</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in shopProducts.Items)
                        {
                            <tr>
                                <td>@product.ProductName</td>
                                <td>@product.SKU</td>
                                <td>$@product.RetailPrice.ToString("F2")</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>@product.CurrentStock units</td>
                                <td>
                                    @if (product.CurrentStock == 0)
                                    {
                                        <span class="text-danger">Out of Stock</span>
                                        <button class="btn btn-sm btn-warning ms-2"
                                                @onclick="() => RequestFromDistributor(product)">
                                            Request Stock
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-success">Available</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products in shop. Add products from distributor above.</p>
            }
        </div>
    </div>

    <!-- Customer Orders -->
    <div class="card">
        <div class="card-header">
            <h5>Recent Customer Orders</h5>
        </div>
        <div class="card-body">
            @if (customerOrders?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Total</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in customerOrders.Take(5))
                        {
                            <tr>
                                <td>@order.OrderNumber</td>
                                <td>@order.CustomerName</td>
                                <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                                <td>$@order.TotalAmount.ToString("F2")</td>
                                <td>
                                    <span class="badge bg-@GetStatusColor(order.Status)">
                                        @order.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No customer orders yet.</p>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<SellerProductDto>? shopProducts;
    private List<DistributorProductDto> distributorProducts = new();
    private List<CustomerOrderDto> customerOrders = new();
    private HashSet<int> addedProductIds = new();

    private bool isLoading = true;
    private bool isLoadingDistributorProducts = true;
    private string? userEmail = null;  // ADDED: Define email variable

    protected override async Task OnInitializedAsync()
    {
        // ADDED: Get the current user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userEmail = authState.User.Identity?.Name ?? authState.User.FindFirst(c => c.Type.Contains("email"))?.Value ?? "seller@cozycomfort.com";

        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.WhenAll(
            LoadShopProducts(),
            LoadDistributorProducts(),
            LoadCustomerOrders()
        );
    }

    private async Task LoadShopProducts()
    {
        try
        {
            isLoading = true;
            var response = await SellerService.GetProductsAsync(new PagedRequest { PageSize = 100 });
            if (response.Success && response.Data != null)
            {
                shopProducts = response.Data;
                addedProductIds = shopProducts.Items
                    .Select(p => p.DistributorProductId)
                    .ToHashSet();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading shop products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDistributorProducts()
    {
        try
        {
            isLoadingDistributorProducts = true;
            var response = await DistributorService.GetProductsAsync(new PagedRequest { PageSize = 100 });
            if (response.Success && response.Data != null)
            {
                distributorProducts = response.Data.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading distributor products: {ex.Message}");
        }
        finally
        {
            isLoadingDistributorProducts = false;
        }
    }

    private async Task LoadCustomerOrders()
    {
        try
        {
            // FIXED: Use userEmail instead of undefined 'email'
            var ordersResponse = await SellerService.GetCustomerOrdersAsync(userEmail!);
            // FIXED: Use ordersResponse instead of undefined 'response'
            if (ordersResponse.Success && ordersResponse.Data != null)
            {
                customerOrders = ordersResponse.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
    }

    private void AddToShop(DistributorProductDto distributorProduct)
    {
        // This demonstrates adding product to shop
        // In real implementation, this would call a service to add the product

        Console.WriteLine($"Adding {distributorProduct.ProductName} to shop with retail price: ${distributorProduct.SellingPrice * 1.3m:F2}");

        // Mark as added and refresh
        addedProductIds.Add(distributorProduct.Id);
        StateHasChanged();
    }

    private async Task RequestFromDistributor(SellerProductDto product)
    {
        // This demonstrates the stock request process
        Console.WriteLine($"Requesting stock for {product.ProductName} from distributor");

        // In real implementation, this would create an order to distributor
        var orderDto = new ProcessSellerOrderDto
        {
            SellerId = 1, // Current seller ID
            SellerOrderNumber = $"SEL-{DateTime.Now:yyyyMMdd}-{Random.Shared.Next(1000, 9999)}",
            Items = new List<SellerOrderItem>
            {
                new SellerOrderItem
                {
                    DistributorProductId = product.DistributorProductId,
                    Quantity = 20,
                    RequestedPrice = product.RetailPrice
                }
            },
            ShippingAddress = "Seller Store Address"
        };

        // For demo, just reload
        await LoadData();
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => "warning",
            "Processing" => "info",
            "Shipped" => "primary",
            "Delivered" => "success",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }
}