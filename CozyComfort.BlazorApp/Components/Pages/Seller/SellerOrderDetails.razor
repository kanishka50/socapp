@page "/seller/orders/{OrderId:int}"
@using CozyComfort.Shared.DTOs.Seller
@using CozyComfort.BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject NavigationManager Navigation
@inject ILogger<SellerOrderDetails> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Order Details - Seller</PageTitle>

<div class="container-fluid p-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/seller/dashboard">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/seller/orders">Orders</a></li>
            <li class="breadcrumb-item active" aria-current="page">Order Details</li>
        </ol>
    </nav>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading order details...</span>
            </div>
        </div>
    }
    else if (order != null)
    {
        <!-- Order Header -->
        <div class="row mb-4">
            <div class="col-md-8">
                <h3>Order #@order.OrderNumber</h3>
                <p class="text-muted mb-0">Order ID: @order.Id</p>
            </div>
            <div class="col-md-4 text-end">
                <span class="badge @GetStatusBadgeClass(order.Status) fs-6">
                    @GetDisplayStatus(order.Status)
                </span>
            </div>
        </div>

        <div class="row">
            <!-- Order Information -->
            <div class="col-md-8">
                <!-- Order Summary -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6 class="text-muted">Order Date</h6>
                                <p>@order.OrderDate.ToString("MMMM dd, yyyy hh:mm tt")</p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <h6 class="text-muted">Customer Information</h6>
                                <div class="border rounded p-3">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>Name:</strong> @order.CustomerName<br />
                                            <strong>Email:</strong> @order.CustomerEmail
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Shipping Address:</strong><br />
                                            @order.ShippingAddress
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Order Items</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>SKU</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.Items)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@item.ProductName</strong>
                                            </td>
                                            <td>@item.SKU</td>
                                            <td>@item.Quantity</td>
                                            <td>$@item.UnitPrice.ToString("F2")</td>
                                            <td>$@item.TotalPrice.ToString("F2")</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-light">
                                    <tr>
                                        <th colspan="4" class="text-end">Order Total:</th>
                                        <th>$@order.TotalAmount.ToString("F2")</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions Panel -->
            <div class="col-md-4">
                <!-- Order Actions -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Order Actions</h5>
                    </div>
                    <div class="card-body">
                        @if (IsOrderPending(order.Status))
                        {
                            <div class="alert alert-info">
                                <strong>Pending Order</strong><br />
                                Choose an action for this order:
                            </div>

                            <button class="btn btn-success w-100 mb-2" @onclick='() => QuickUpdateStatus("Accepted")' disabled="@isUpdating">
                                @if (isUpdating && pendingAction == "Accepted")
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                <i class="bi bi-check-circle"></i> Accept Order
                            </button>

                            <button class="btn btn-danger w-100 mb-2" @onclick='() => QuickUpdateStatus("Cancelled")' disabled="@isUpdating">
                                @if (isUpdating && pendingAction == "Cancelled")
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                <i class="bi bi-x-circle"></i> Cancel Order
                            </button>

                            <hr />
                        }
                        else
                        {
                            <div class="alert alert-secondary">
                                <strong>Order Status:</strong> @GetDisplayStatus(order.Status)<br />
                                <small>This order has been processed and cannot be modified.</small>
                            </div>
                        }

                        <button class="btn btn-outline-secondary w-100 mb-2" @onclick="PrintOrder">
                            <i class="bi bi-printer"></i> Print Order
                        </button>

                        <button class="btn btn-outline-info w-100 mb-2" @onclick="EmailCustomer">
                            <i class="bi bi-envelope"></i> Email Customer
                        </button>

                        <button class="btn btn-secondary w-100" @onclick="NavigateToOrders">
                            <i class="bi bi-arrow-left"></i> Back to Orders
                        </button>
                    </div>
                </div>

                <!-- Order Timeline -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Order Timeline</h6>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            <div class="timeline-item completed">
                                <div class="timeline-marker bg-success"></div>
                                <div class="timeline-content">
                                    <h6 class="mb-0">Order Placed</h6>
                                    <small class="text-muted">@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                            </div>

                            <div class="timeline-item @(IsStatusReached("Pending") ? "completed" : "")">
                                <div class="timeline-marker @(IsStatusReached("Pending") ? "bg-warning" : "bg-secondary")"></div>
                                <div class="timeline-content">
                                    <h6 class="mb-0">Pending Review</h6>
                                    <small class="text-muted">@(IsStatusReached("Pending") ? "Order awaiting approval" : "Not reached")</small>
                                </div>
                            </div>

                            @if (IsStatusReached("Accepted"))
                            {
                                <div class="timeline-item completed">
                                    <div class="timeline-marker bg-success"></div>
                                    <div class="timeline-content">
                                        <h6 class="mb-0">Order Accepted</h6>
                                        <small class="text-muted">Order approved and inventory deducted</small>
                                    </div>
                                </div>
                            }

                            @if (IsStatusReached("Cancelled"))
                            {
                                <div class="timeline-item completed">
                                    <div class="timeline-marker bg-danger"></div>
                                    <div class="timeline-content">
                                        <h6 class="mb-0">Order Cancelled</h6>
                                        <small class="text-muted">Order was cancelled</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Success/Error Messages -->
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        @successMessage
                        <button type="button" class="btn-close" @onclick="ClearSuccessMessage" aria-label="Close"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="ClearErrorMessage" aria-label="Close"></button>
                    </div>
                }
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-circle"></i> @errorMessage
        </div>
        <button class="btn btn-primary" @onclick="NavigateToOrders">
            <i class="bi bi-arrow-left"></i> Back to Orders
        </button>
    }
</div>

<!-- Confirmation Modal -->
@if (showConfirmModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (pendingAction == "Accepted")
                        {
                            <i class="bi bi-check-circle text-success"></i>
                            <text>Accept Order</text>
                        }
                        else
                        {
                            <i class="bi bi-x-circle text-danger"></i>
                            <text>Cancel Order</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Order:</strong> @order?.OrderNumber</p>
                    <p><strong>Customer:</strong> @order?.CustomerName</p>
                    <p><strong>Total Amount:</strong> $@order?.TotalAmount.ToString("N2")</p>

                    @if (pendingAction == "Accepted")
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Important:</strong> Accepting this order will deduct the following items from your inventory:
                        </div>
                        <ul>
                            @if (order?.Items != null)
                            {
                                @foreach (var item in order.Items)
                                {
                                    <li>@item.ProductName - Quantity: @item.Quantity</li>
                                }
                            }
                        </ul>
                        <p class="text-muted">Make sure you have sufficient stock before accepting.</p>
                    }
                    else
                    {
                        <p>Are you sure you want to cancel this order?</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmModal">Close</button>
                    <button type="button"
                            class="btn @(pendingAction == "Accepted" ? "btn-success" : "btn-danger")"
                            @onclick="ConfirmStatusUpdate"
                            disabled="@isUpdating">
                        @if (isUpdating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        @(pendingAction == "Accepted" ? "Accept Order" : "Cancel Order")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 20px;
    }

        .timeline-item:not(:last-child)::before {
            content: '';
            position: absolute;
            left: -20px;
            top: 20px;
            width: 2px;
            height: calc(100% - 10px);
            background-color: #dee2e6;
        }

        .timeline-item.completed:not(:last-child)::before {
            background-color: #28a745;
        }

    .timeline-marker {
        position: absolute;
        left: -25px;
        top: 5px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 2px solid #fff;
        box-shadow: 0 0 0 2px #dee2e6;
    }

    .timeline-content h6 {
        margin-bottom: 2px;
    }
</style>

@code {
    [Parameter] public int OrderId { get; set; }

    private CustomerOrderDto? order;
    private bool isLoading = true;
    private bool isUpdating = false;
    private string? errorMessage;
    private string? successMessage;
    private string pendingAction = "";
    private bool showConfirmModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await SellerService.GetOrderByIdAsync(OrderId);

            if (response.Success && response.Data != null)
            {
                order = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Order not found";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading order {OrderId}", OrderId);
            errorMessage = "An error occurred while loading order details";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void QuickUpdateStatus(string newStatus)
    {
        pendingAction = newStatus;
        showConfirmModal = true;
    }

    private void CloseConfirmModal()
    {
        showConfirmModal = false;
        pendingAction = "";
    }

    private async Task ConfirmStatusUpdate()
    {
        if (order == null || string.IsNullOrEmpty(pendingAction))
            return;

        try
        {
            isUpdating = true;
            errorMessage = null;
            successMessage = null;

            var response = await SellerService.UpdateOrderStatusAsync(order.Id, pendingAction);

            if (response.Success)
            {
                successMessage = pendingAction == "Accepted"
                    ? "Order accepted successfully! Inventory has been updated."
                    : "Order cancelled successfully!";

                order.Status = pendingAction;
                CloseConfirmModal();

                // Optional: Show success with JS alert
                await JSRuntime.InvokeVoidAsync("alert", successMessage);
            }
            else
            {
                errorMessage = response.Message ?? $"Failed to {pendingAction.ToLower()} order";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status");
            errorMessage = "An error occurred while updating order status";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private void PrintOrder()
    {
        // TODO: Implement print functionality
        successMessage = "Print functionality will be implemented";
    }

    private void EmailCustomer()
    {
        // TODO: Implement email functionality
        successMessage = "Email functionality will be implemented";
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/seller/orders");
    }

    private void ClearSuccessMessage()
    {
        successMessage = null;
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    // FIXED: Check if order is pending
    private bool IsOrderPending(string status)
    {
        if (string.IsNullOrEmpty(status))
            return false;

        return status.Trim().Equals("Pending", StringComparison.OrdinalIgnoreCase) ||
               status.Trim() == "0";
    }

    // FIXED: Proper status badge mapping
    private string GetStatusBadgeClass(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "bg-secondary";

        return status.Trim().ToLower() switch
        {
            "pending" or "0" => "bg-warning text-dark",
            "accepted" or "1" => "bg-success text-white",
            "cancelled" or "2" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    // Helper method to display proper status name
    private string GetDisplayStatus(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "Unknown";

        return status.Trim() switch
        {
            "0" => "Pending",
            "1" => "Accepted",
            "2" => "Cancelled",
            _ => status
        };
    }

    private bool IsStatusReached(string targetStatus)
    {
        if (order == null) return false;

        // For our simple enum: Pending -> Accepted OR Cancelled
        return targetStatus.ToLower() switch
        {
            "pending" => true, // Always reached since order exists
            "accepted" => IsOrderAccepted(order.Status),
            "cancelled" => IsOrderCancelled(order.Status),
            _ => false
        };
    }

    private bool IsOrderAccepted(string status)
    {
        return status?.Trim().Equals("Accepted", StringComparison.OrdinalIgnoreCase) == true ||
               status?.Trim() == "1";
    }

    private bool IsOrderCancelled(string status)
    {
        return status?.Trim().Equals("Cancelled", StringComparison.OrdinalIgnoreCase) == true ||
               status?.Trim() == "2";
    }
}