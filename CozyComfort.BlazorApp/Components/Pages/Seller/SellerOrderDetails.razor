@page "/seller/orders/{OrderId:int}"
@using CozyComfort.Shared.DTOs.Seller
@using CozyComfort.BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@attribute [Authorize(Roles = "Seller,Administrator")]
@inject ISellerService SellerService
@inject NavigationManager Navigation
@inject ILogger<SellerOrderDetails> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Order Details - Seller</PageTitle>

<div class="container-fluid p-4">
    <!-- Clean Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Order Details</h2>
            <p class="text-muted mb-0">@(order?.OrderNumber ?? "Loading...")</p>
        </div>
        <button class="btn btn-outline-secondary" @onclick="NavigateToOrders">
            <i class="bi bi-arrow-left"></i> Back to Orders
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading order details...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-circle"></i> @errorMessage
        </div>
    }
    else if (order != null)
    {
        <!-- Success/Error Messages -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle"></i> @successMessage
                <button type="button" class="btn-close" @onclick="ClearSuccessMessage"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-circle"></i> @errorMessage
                <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
            </div>
        }

        <div class="row">
            <!-- Order Information -->
            <div class="col-md-8">
                <!-- Order Summary Card -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-clipboard-data me-2"></i>Order Summary
                        </h5>
                        <span class="badge @GetStatusBadgeClass(order.Status) fs-6">
                            @GetDisplayStatus(order.Status)
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-muted">Order Information</h6>
                                <div class="mb-3">
                                    <strong>Order Number:</strong> @order.OrderNumber<br />
                                    <strong>Order ID:</strong> @order.Id<br />
                                    <strong>Order Date:</strong> @order.OrderDate.ToString("MMMM dd, yyyy hh:mm tt")
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted">Customer Information</h6>
                                <div class="mb-3">
                                    <strong>Name:</strong> @order.CustomerName<br />
                                    <strong>Email:</strong> @order.CustomerEmail
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <h6 class="text-muted">Shipping Address</h6>
                                <div class="border rounded p-3 bg-light">
                                    @order.ShippingAddress
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Items Card -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-box-seam me-2"></i>Order Items
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (order.Items?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Product</th>
                                            <th>SKU</th>
                                            <th>Quantity</th>
                                            <th>Unit Price</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.Items)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="fw-semibold">@item.ProductName</div>
                                                </td>
                                                <td class="text-muted">@item.SKU</td>
                                                <td>
                                                    <span class="badge bg-secondary">@item.Quantity</span>
                                                </td>
                                                <td>$@item.UnitPrice.ToString("F2")</td>
                                                <td class="fw-semibold">$@item.TotalPrice.ToString("F2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot class="table-light">
                                        <tr>
                                            <th colspan="4" class="text-end fs-5">Order Total:</th>
                                            <th class="fs-5 text-success">$@order.TotalAmount.ToString("F2")</th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="bi bi-inbox display-2"></i>
                                <h6 class="mt-2">No Items Found</h6>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Actions Panel -->
            <div class="col-md-4">
                <!-- Order Actions Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-gear me-2"></i>Order Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (IsOrderPending(order.Status))
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i>
                                <strong>Pending Order</strong><br />
                                Choose an action for this order
                            </div>

                            <div class="d-grid gap-2">
                                <button class="btn btn-success" @onclick='() => QuickUpdateStatus("Accepted")' disabled="@isUpdating">
                                    @if (isUpdating && pendingAction == "Accepted")
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-check-circle me-2"></i>Accept Order
                                </button>

                                <button class="btn btn-danger" @onclick='() => QuickUpdateStatus("Cancelled")' disabled="@isUpdating">
                                    @if (isUpdating && pendingAction == "Cancelled")
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-x-circle me-2"></i>Cancel Order
                                </button>
                            </div>

                            <hr />
                        }
                        else
                        {
                            <div class="alert alert-secondary">
                                <i class="bi bi-lock"></i>
                                <strong>Order Processed</strong><br />
                                <small>
                                    Status: @GetDisplayStatus(order.Status)<br />
                                    This order cannot be modified.
                                </small>
                            </div>
                        }

                        <!-- Additional Actions -->
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-secondary" @onclick="PrintOrder">
                                <i class="bi bi-printer me-2"></i>Print Order
                            </button>
                            <button class="btn btn-outline-info" @onclick="EmailCustomer">
                                <i class="bi bi-envelope me-2"></i>Email Customer
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Order Status Timeline Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-clock-history me-2"></i>Order Timeline
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            <div class="timeline-item completed">
                                <div class="timeline-marker bg-success"></div>
                                <div class="timeline-content">
                                    <div class="fw-semibold">Order Placed</div>
                                    <small class="text-muted">@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                            </div>

                            <div class="timeline-item @(IsStatusReached("Pending") ? "completed" : "")">
                                <div class="timeline-marker @(IsStatusReached("Pending") ? "bg-warning" : "bg-secondary")"></div>
                                <div class="timeline-content">
                                    <div class="fw-semibold">Pending Review</div>
                                    <small class="text-muted">Awaiting seller action</small>
                                </div>
                            </div>

                            @if (IsStatusReached("Accepted"))
                            {
                                <div class="timeline-item completed">
                                    <div class="timeline-marker bg-success"></div>
                                    <div class="timeline-content">
                                        <div class="fw-semibold">Order Accepted</div>
                                        <small class="text-muted">Inventory updated</small>
                                    </div>
                                </div>
                            }

                            @if (IsStatusReached("Cancelled"))
                            {
                                <div class="timeline-item completed">
                                    <div class="timeline-marker bg-danger"></div>
                                    <div class="timeline-content">
                                        <div class="fw-semibold">Order Cancelled</div>
                                        <small class="text-muted">Order was cancelled</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Order Summary Stats -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-bar-chart me-2"></i>Order Summary
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="fw-semibold text-primary">@(order.Items?.Count ?? 0)</div>
                                <small class="text-muted">Items</small>
                            </div>
                            <div class="col-6">
                                <div class="fw-semibold text-info">@(order.Items?.Sum(i => i.Quantity) ?? 0)</div>
                                <small class="text-muted">Total Quantity</small>
                            </div>
                        </div>
                        <hr class="my-3">
                        <div class="text-center">
                            <div class="fw-bold text-success fs-4">$@order.TotalAmount.ToString("F2")</div>
                            <small class="text-muted">Total Amount</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Confirmation Modal -->
@if (showConfirmModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (pendingAction == "Accepted")
                        {
                            <i class="bi bi-check-circle text-success me-2"></i>
                            Accept Order
                                            }
                        else
                        {
                            <i class="bi bi-x-circle text-danger me-2"></i>
                            Cancel Order
                                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="bg-light p-3 rounded">
                            <strong>Order:</strong> @order?.OrderNumber<br />
                            <strong>Customer:</strong> @order?.CustomerName<br />
                            <strong>Total Amount:</strong> $@order?.TotalAmount.ToString("N2")
                        </div>
                    </div>

                    @if (pendingAction == "Accepted")
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Important:</strong> Accepting this order will deduct items from your inventory:
                        </div>

                        @if (order?.Items != null)
                        {
                            <ul class="list-unstyled mb-3">
                                @foreach (var item in order.Items)
                                {
                                    <li class="border-bottom py-2">
                                        <div class="d-flex justify-content-between">
                                            <span>@item.ProductName</span>
                                            <span class="badge bg-primary">@item.Quantity</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }

                        <p class="text-muted mb-0">Make sure you have sufficient stock before accepting.</p>
                    }
                    else
                    {
                        <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmModal">Cancel</button>
                    <button type="button"
                            class="btn @(pendingAction == "Accepted" ? "btn-success" : "btn-danger")"
                            @onclick="ConfirmStatusUpdate"
                            disabled="@isUpdating">
                        @if (isUpdating)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @(pendingAction == "Accepted" ? "Accept Order" : "Cancel Order")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 20px;
    }

        .timeline-item:not(:last-child)::before {
            content: '';
            position: absolute;
            left: -20px;
            top: 20px;
            width: 2px;
            height: calc(100% - 10px);
            background-color: #dee2e6;
        }

        .timeline-item.completed:not(:last-child)::before {
            background-color: #28a745;
        }

    .timeline-marker {
        position: absolute;
        left: -25px;
        top: 5px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 2px solid #fff;
        box-shadow: 0 0 0 2px #dee2e6;
    }

    .timeline-content {
        margin-bottom: 5px;
    }
</style>

@code {
    [Parameter] public int OrderId { get; set; }

    private CustomerOrderDto? order;
    private bool isLoading = true;
    private bool isUpdating = false;
    private string? errorMessage;
    private string? successMessage;
    private string pendingAction = "";
    private bool showConfirmModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await SellerService.GetOrderByIdAsync(OrderId);

            if (response.Success && response.Data != null)
            {
                order = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Order not found";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading order {OrderId}", OrderId);
            errorMessage = "An error occurred while loading order details";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void QuickUpdateStatus(string newStatus)
    {
        pendingAction = newStatus;
        showConfirmModal = true;
    }

    private void CloseConfirmModal()
    {
        showConfirmModal = false;
        pendingAction = "";
    }

    private async Task ConfirmStatusUpdate()
    {
        if (order == null || string.IsNullOrEmpty(pendingAction))
            return;

        try
        {
            isUpdating = true;
            errorMessage = null;
            successMessage = null;

            var response = await SellerService.UpdateOrderStatusAsync(order.Id, pendingAction);

            if (response.Success)
            {
                successMessage = pendingAction == "Accepted"
                    ? "Order accepted successfully! Inventory has been updated."
                    : "Order cancelled successfully!";

                order.Status = pendingAction;
                CloseConfirmModal();
            }
            else
            {
                errorMessage = response.Message ?? $"Failed to {pendingAction.ToLower()} order";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status");
            errorMessage = "An error occurred while updating order status";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private void PrintOrder()
    {
        successMessage = "Print functionality will be implemented";
    }

    private void EmailCustomer()
    {
        successMessage = "Email functionality will be implemented";
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/seller/orders");
    }

    private void ClearSuccessMessage()
    {
        successMessage = null;
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    private bool IsOrderPending(string status)
    {
        if (string.IsNullOrEmpty(status))
            return false;

        return status.Trim().Equals("Pending", StringComparison.OrdinalIgnoreCase) ||
               status.Trim() == "0";
    }

    private string GetStatusBadgeClass(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "bg-secondary";

        return status.Trim().ToLower() switch
        {
            "pending" or "0" => "bg-warning text-dark",
            "accepted" or "1" => "bg-success text-white",
            "cancelled" or "2" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetDisplayStatus(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "Unknown";

        return status.Trim() switch
        {
            "0" => "Pending",
            "1" => "Accepted",
            "2" => "Cancelled",
            _ => status
        };
    }

    private bool IsStatusReached(string targetStatus)
    {
        if (order == null) return false;

        return targetStatus.ToLower() switch
        {
            "pending" => true,
            "accepted" => IsOrderAccepted(order.Status),
            "cancelled" => IsOrderCancelled(order.Status),
            _ => false
        };
    }

    private bool IsOrderAccepted(string status)
    {
        return status?.Trim().Equals("Accepted", StringComparison.OrdinalIgnoreCase) == true ||
               status?.Trim() == "1";
    }

    private bool IsOrderCancelled(string status)
    {
        return status?.Trim().Equals("Cancelled", StringComparison.OrdinalIgnoreCase) == true ||
               status?.Trim() == "2";
    }
}