@page "/shop"
@inject ISellerService SellerService
@inject IJSRuntime JSRuntime
@inject SimpleSessionService SessionService
@rendermode InteractiveServer

<PageTitle>Shop - Cozy Comfort</PageTitle>

<div class="container-fluid">
    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <!-- Search -->
                    <div class="mb-3">
                        <label class="form-label">Search</label>
                        <input type="text" class="form-control" placeholder="Search products..."
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    <!-- Category Filter -->
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" @bind="selectedCategory">
                            <option value="">All Categories</option>
                            <option value="Luxury">Luxury</option>
                            <option value="Comfort">Comfort</option>
                            <option value="Economy">Economy</option>
                        </select>
                    </div>

                    <!-- Sort By -->
                    <div class="mb-3">
                        <label class="form-label">Sort By</label>
                        <select class="form-select" @bind="sortBy">
                            <option value="">Default</option>
                            <option value="name">Name (A-Z)</option>
                            <option value="name-desc">Name (Z-A)</option>
                            <option value="price">Price (Low to High)</option>
                            <option value="price-desc">Price (High to Low)</option>
                        </select>
                    </div>

                    <button class="btn btn-primary w-100" @onclick="ApplyFilters">
                        Apply Filters
                    </button>
                    <button class="btn btn-outline-secondary w-100 mt-2" @onclick="ClearFilters">
                        Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Our Products</h2>
                <div>
                    @if (products != null)
                    {
                        <span class="text-muted">Showing @products.Items.Count of @products.TotalCount products</span>
                    }
                </div>
            </div>

            @if (loading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> @errorMessage
                </div>
            }
            else if (products == null || !products.Items.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> No products found matching your criteria.
                </div>
            }
            else
            {
                <div class="row g-4">
                    @foreach (var product in products.Items)
                    {
                        <div class="col-md-4 col-lg-3">
                            <div class="card h-100 shadow-sm">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.ProductName"
                                         style="height: 200px; object-fit: cover;" />
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center"
                                         style="height: 200px;">
                                        <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                                    </div>
                                }

                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@product.ProductName</h5>

                                    @if (!string.IsNullOrEmpty(product.Category))
                                    {
                                        <span class="badge bg-secondary mb-2">@product.Category</span>
                                    }

                                    <p class="card-text flex-grow-1">
                                        @(string.IsNullOrEmpty(product.Description) ? "No description available" : product.Description)
                                    </p>

                                    <div class="d-flex justify-content-between align-items-center mt-auto">
                                        <strong class="text-primary">$@product.Price.ToString("F2")</strong>

                                        @if (product.IsAvailable)
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)">
                                                <i class="bi bi-cart-plus"></i> Add to Cart
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary btn-sm" disabled>
                                                Out of Stock
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (products.TotalPages > 1)
                {
                    <nav class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                    Previous
                                </button>
                            </li>

                            @for (int i = 1; i <= Math.Min(products.TotalPages, 10); i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                                        @pageNumber
                                    </button>
                                </li>
                            }

                            @if (products.TotalPages > 10)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                <li class="page-item @(currentPage == products.TotalPages ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(products.TotalPages)">
                                        @products.TotalPages
                                    </button>
                                </li>
                            }

                            <li class="page-item @(currentPage == products.TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

<!-- Add to Cart Success Modal -->
@if (showCartModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle text-success"></i> Added to Cart
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showCartModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>@cartMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCartModal = false">
                        Continue Shopping
                    </button>
                    <a href="/cart" class="btn btn-primary">
                        View Cart
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResult<SellerProductDto>? products;
    private bool loading = true;
    private string? errorMessage;
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortBy = "";
    private int currentPage = 1;
    private int pageSize = 12;

    private bool showCartModal = false;
    private string cartMessage = "";
    private string sessionId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the shared session ID
        sessionId = SessionService.GetSessionId();
        Console.WriteLine($"Shop using session ID: {sessionId}");
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        errorMessage = null;

        try
        {
            var request = new PagedRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm,
                SortBy = GetSortField(),
                IsDescending = sortBy.EndsWith("-desc")
            };

            // Add category filter to search term if selected
            if (!string.IsNullOrEmpty(selectedCategory))
            {
                request.SearchTerm = string.IsNullOrEmpty(request.SearchTerm)
                    ? selectedCategory
                    : $"{request.SearchTerm} {selectedCategory}";
            }

            var response = await SellerService.GetProductsAsync(request);

            if (response.Success)
            {
                products = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load products";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading products. Please try again.";
        }
        finally
        {
            loading = false;
        }
    }

    private string GetSortField()
    {
        return sortBy switch
        {
            "name" or "name-desc" => "ProductName",
            "price" or "price-desc" => "Price",
            _ => ""
        };
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        sortBy = "";
        currentPage = 1;
        await LoadProducts();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= (products?.TotalPages ?? 1))
        {
            currentPage = page;
            await LoadProducts();
        }
    }

    private async Task AddToCart(SellerProductDto product)
    {
        try
        {
            var addToCartDto = new AddToCartDto
            {
                ProductId = product.Id,
                Quantity = 1
            };

            Console.WriteLine($"Adding product {product.Id} to cart with session {sessionId}");
            var response = await SellerService.AddToCartAsync(sessionId, addToCartDto);

            if (response.Success)
            {
                cartMessage = $"{product.ProductName} has been added to your cart!";
                showCartModal = true;
                Console.WriteLine($"Successfully added to cart");
            }
            else
            {
                Console.WriteLine($"Failed to add to cart: {response.Message}");
                await JSRuntime.InvokeVoidAsync("alert", response.Message ?? "Failed to add item to cart");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding to cart: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred. Please try again.");
        }
    }
}