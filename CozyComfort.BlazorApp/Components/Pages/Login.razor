@page "/login"
@using CozyComfort.Shared.DTOs
@using CozyComfort.Shared.Enums
@inject IAuthService AuthService
@inject NavigationManager Navigation
@using CozyComfort.BlazorApp.Services.Interfaces
@rendermode InteractiveServer

<PageTitle>Login - Cozy Comfort</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Login to Cozy Comfort</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginFormModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Login As:</label>
                            <InputSelect @bind-Value="loginFormModel.SelectedRole" class="form-select">
                                <option value="">Select Role</option>
                                <option value="manufacturer">Manufacturer</option>
                                <option value="distributor">Distributor</option>
                                <option value="seller">Seller</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginFormModel.Email" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="loginFormModel.Password"
                                       type="password" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@loading">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Login
                        </button>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }

                    <div class="mt-3">
                        <h5>Test Accounts:</h5>
                        <ul>
                            <li>Manufacturer: manufacturer@cozycomfort.com / Manufacturer123!</li>
                            <li>Distributor: distributor@cozycomfort.com / Distributor123!</li>
                            <li>Seller: seller@cozycomfort.com / Seller123!</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginFormModel loginFormModel { get; set; } = new();

    private bool loading;
    private string errorMessage = "";

    // Combined model for form binding
    public class LoginFormModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string SelectedRole { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        loginFormModel ??= new();
    }

    // Update the HandleLogin method in Login.razor
    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(loginFormModel.SelectedRole))
        {
            errorMessage = "Please select a role";
            return;
        }

        loading = true;
        errorMessage = "";

        try
        {
            // Create LoginDto from the form model
            var loginDto = new LoginDto
            {
                Email = loginFormModel.Email,
                Password = loginFormModel.Password
            };

            var result = await AuthService.LoginAsync(loginFormModel.SelectedRole, loginDto);

            if (result != null && result.Success)
            {
                // Force a full page reload to establish proper authentication state
                await Task.Delay(100); // Small delay to ensure auth state is set

                // Get the return URL from query string if it exists
                var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
                var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("ReturnUrl");

                if (!string.IsNullOrEmpty(returnUrl) && returnUrl.StartsWith("/"))
                {
                    // Navigate to the originally requested page
                    Navigation.NavigateTo(returnUrl, forceLoad: true);
                }
                else
                {
                    // Default navigation based on role
                    var redirectUrl = loginFormModel.SelectedRole switch
                    {
                        "manufacturer" => "/manufacturer/dashboard",
                        "distributor" => "/distributor/dashboard",
                        "seller" => "/seller/dashboard",
                        _ => "/"
                    };
                    Navigation.NavigateTo(redirectUrl, forceLoad: true);
                }
            }
            else
            {
                errorMessage = result.Message ?? "Login failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
}